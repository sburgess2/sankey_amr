{"title":"Sankey plot to visualise *E. coli* resistance genes","markdown":{"yaml":{"bibliography":"references.bib","csl":"nature-communications.csl","nocite":"@*\n"},"headingText":"Sankey plot to visualise *E. coli* resistance genes","containsRefs":false,"markdown":"\n\n\nHere are the steps I used to generate my Sankey diagrams.\n\n### Packages\n\nIf you haven't done so already install the packages networkD3, tidyverse, htmlwidgets, manipulateWidget and webshot2.\n\nLoad the libraries\n\n```{r libraries, message = FALSE, warning = FALSE}\nlibrary(networkD3)\nlibrary(tidyverse)\nlibrary(htmlwidgets)\nlibrary(manipulateWidget)\nlibrary(webshot2)\n```\n\n### Read in and prepare data\n\nThe following code was adapted from <https://r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html> (and a little bit of help from chatgpt when I had trouble setting up the groups). Two dataframes are needed to generate a Sankey network. One for the links and the other for the nodes. In the r graph gallery example the links dataframe was generated using the data.frame() function. Initially I tried this, but then it became too messy when I was adding multiple antibiotic classes so I read in a csv file.\n\n```{r readcsv}\nlinks <- read_csv(\"data/resistance_mechanisms.csv\")\n```\n\nMy csv file contains three columns: source, target, value. Source is the origin of each data link. Given, my Sankey network has three columns, source is both the name of the of the antibiotic classes and the mechanisms. Target is the endpoint of each data link. This contains the mechanisms and resistance genes.Value is the relative thickness of each link.\n\n```{r}\n#First six lines of my data frame\nhead(links)\n```\n\nThe \\` in some of my gene names is read in as ? so first I replace the ? with ′\n\n```{r}\nlinks$target <- str_replace_all(links$target, \"\\\\?\", \"′\") \n```\n\nNext I created a one column data frame for all the nodes.The column name is labelled name and the observations are all the unique names from source and target.\n\n```{r}\nnodes <- data.frame(\n  name = unique(c(as.character(links$source), as.character(links$target))))\n```\n\nA second column was added to the nodes dataframe called group. This will be used to colour the Sankey Network links by group.\n\n```{r}\n# Grouping\nnodes$group <- case_when(\n  nodes$name == \"Aminoglycosides\" ~ \"Aminoglycosides\",\n  nodes$name == \"Fluoroquinolones\" ~ \"Fluoroquinolones\",\n  nodes$name == \"Tetracyclines\" ~ \"Tetracyclines\",\n  nodes$name == \"Phenicols\" ~ \"Phenicols\",\n  nodes$name == \"Sulfonamides & Trimethoprim\" ~ \"Sulfonamides\",\n  nodes$name == \"Nitrofurans\" ~ \"Nitrofurans\",\n  nodes$name == \"Macrolides\" ~ \"Macrolides\",\n  nodes$name %in% c(\"aac(3′)\", \"aadA\", \"aadB\", \"aadD\",\n                    \"aph(3′)\", \"aphA15\", \"rrsH*\", \"rsmG*\") ~ \"Aminoglycosides\",\n  nodes$name %in% c(\"gyrA*\", \"gyrB*\", \"parC*\", \"parE*\", \"qep\", \"qnr\", \"oqxAB\") ~ \"Fluoroquinolones\",\n  nodes$name %in% c(\"tetX\", \"tetM\", \"tetW\", \"tetA\", \"tetB\", \"tetC\", \"tetD\") ~ \"Tetracyclines\",\n  nodes$name %in% c(\"catB\", \"catII\", \"cmlA\", \"floR\") ~ \"Phenicols\",\n  nodes$name %in% c(\"dfr\", \"folP*\", \"sul1\", \"sul2\", \"sul3\", \"sul4\") ~ \"Sulfonamides\",\n  nodes$name %in% c(\"nfsA*\", \"nfsB*\", \"ahpF*\", \"ribB*\", \"ribE*\") ~ \"Nitrofurans\",\n  nodes$name %in% c(\"ermA\", \"ermB\", \"ermC\", \"ereA\", \"mphA\", \"mphB\", \"mefA\", \"mefB\", \"msrA\", \"msrD\") ~ \"Macrolides\",\n  TRUE ~ \"Other\"\n)\n```\n\nTwo additional columns were added, which contain an index for both the source and the target. The match function is used to match the position of the values that are being matched. As I understand it networkD3 uses an index system starting from 0, whereas base R starts from 1, hence the -1 is needed to generate an index system suitable for the function networkD3::sankeyNetwork().\n\n```{r}\n# ID mapping\nlinks$IDsource <- match(links$source, nodes$name) - 1\nlinks$IDtarget <- match(links$target, nodes$name) - 1\n\nlinks\n```\n\nSimilar to the nodes dataframe a group column was also added to the links dataframe.\n\n```{r}\n#Generate vector containing the group names for all the antibiotic classes\nclass <- c(\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\", \"Macrolides\")\n#Generate vector containing the group names for all the mechanisms\nmechanisms <- c(\"Enzymatic inactivation\", \"Target alteration\", \"Target protection\", \"Efflux pump\", \"Target replacement\", \"Reduced prodrug activation\")\n\n# Assign groups\nlinks$group <- case_when(\n  links$source %in% class ~ nodes$group[match(links$source, nodes$name)],\n  links$source %in% mechanisms ~ nodes$group[match(links$target, nodes$name)],\n  TRUE ~ \"Other\")\n```\n\nLastly I generated my colour scale. Here (as I understand it) because networkD3 uses Javascript code the colour scale also has to be written in Javascript. '.domain' defines each group that I want to apply each colour to.\n\n```{r colour}\nmy_color <- 'd3.scaleOrdinal()\n  .domain([\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \n           \"Phenicols\", \"Sulfonamides\", \"Nitrofurans\", \"Macrolides\", \"Other\"])\n  .range([\"#90CAF9\", \"#A5D6A7\", \"#D1C4E9\", \"#ffffb3\", \"#fb8072\", \"#fdb462\", \"#F8BBD0FF\", \"#E0E0E0\"]);'\n```\n\n### Sankey Network\n\nNow for the fun part generating the Sankey Network.\n\n```{r sankey1}\n# Sankey plot\nq <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  width = 900, height = 600\n)\nq\n```\n\nThere are a few things I don't like. The font size and type, the width of the nodes and having the resistance genes on top of the links.\n\nHere I've adjusted these four things within the sankeyNetwork function using the arguments fontSize, fontFamily, nodeWidth and sinksRight.\n\n```{r sankey2}\n# Sankey plot\np <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  fontSize = 12, fontFamily = \"Verdana\", nodeWidth = 60, sinksRight = FALSE, width = 900, height = 900\n)\np\n```\n\nIt's still not quite what I'd like. To my knowledge that is pretty much all that can be adjusted within the SankeyNetwork function. However, because the Sankey Network is an htmlwidget (you can check this using the class function) you can use the htmlwidge package to append labels.\n\n```{r class}\nclass(p)\n```\n\n### Using htmlwidgets to adjust the Sankey Network\n\nThe code below was adapted from the tutorial https://www.geeksforgeeks.org/r-language/how-to-add-axis-labels-using-networkd3-in-r/ and the response on this stack overflow post https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page\n\nHere I've added a title to my figure and a footnote.\n\n```{r}\n#prepend title\np1 <- htmlwidgets::prependContent(p, htmltools::tags$h1(htmltools::HTML(\"Resistance genes in <em>Escherichia coli</em>\"),\n  style = \"text-align:center; color:#1b2422; font-size:18px; font-family:Verdana;\"))\np1\n#append footnote\np2 <- htmlwidgets::appendContent(p1, htmltools::tags$p(\"* Genes with point mutations\", style = \"text-align:center; color:#666; font-size:12px; font-family:Verdana;\"))\np2\n```\n\nI also wanted to change the font style to bold for antibiotic classes and italics for the resistance genes. I got a bit of help from chatgpt for this piece of code.\n\n```{r}\n#The following function was generated using chapgpt\np3 <- htmlwidgets::onRender(p2, '\n  function(el, x) {\n    const boldNames = [\n      \"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\",\n      \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\",\n      \"Enzymatic inactivation\", \"Target alteration\",\n      \"Target protection\", \"Efflux pump\", \"Target replacement\",\n      \"Reduced prodrug activation\", \"Macrolides\"\n    ];\n\n    const italicSubstrings = [\n      \"aac\", \"aad\", \"aph\", \"rr\", \"rsm\", \"qep\", \"qnr\", \"tet\", \"cat\",\n      \"gyr\", \"par\", \"mdf\", \"fol\", \"dfr\", \"nfs\", \"cml\", \"flo\", \"oqx\", \"sul\",\n      \"erm\", \"ereA\", \"mph\", \"mef\", \"msr\", \"ahpF\", \"rib\"\n    ];\n\n    d3.select(el)\n      .selectAll(\".node text\")\n      .style(\"font-weight\", d => boldNames.includes(d.name) ? \"bold\" : \"normal\")\n      .style(\"font-style\", d =>\n        italicSubstrings.some(sub => d.name.includes(sub)) ? \"italic\" : \"normal\"\n      );\n  }\n')\n\np3\n```\n\n## Saving the Sankey Network\n\nIf you are trying this code or similar and want to save your plot as a png you will not be able to use ggsave Because the Sankey Network is an htmlwidget. First save your plot as an html and then take a screenshot using webshot.\n\n```{r, eval = FALSE}\nhtmlwidgets::saveWidget(p3, \"output/sankey.html\", selfcontained = TRUE)\nwebshot(\"output/sankey.html\", file = \"output/sankey_arg.png\", vwidth = 900, vheight = 900)\n```\n\nOne thing I haven't been able to work out is how remove the white space on either side and align the footer to the gene name column, when I save the plot as a png. If anyone reading this has any tips please email me or DM on LinkedIn.\n\n## References\n\nLastly here are some references I used for generating the resistance gene list:\n\n","srcMarkdownNoYaml":"\n\n## Sankey plot to visualise *E. coli* resistance genes\n\nHere are the steps I used to generate my Sankey diagrams.\n\n### Packages\n\nIf you haven't done so already install the packages networkD3, tidyverse, htmlwidgets, manipulateWidget and webshot2.\n\nLoad the libraries\n\n```{r libraries, message = FALSE, warning = FALSE}\nlibrary(networkD3)\nlibrary(tidyverse)\nlibrary(htmlwidgets)\nlibrary(manipulateWidget)\nlibrary(webshot2)\n```\n\n### Read in and prepare data\n\nThe following code was adapted from <https://r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html> (and a little bit of help from chatgpt when I had trouble setting up the groups). Two dataframes are needed to generate a Sankey network. One for the links and the other for the nodes. In the r graph gallery example the links dataframe was generated using the data.frame() function. Initially I tried this, but then it became too messy when I was adding multiple antibiotic classes so I read in a csv file.\n\n```{r readcsv}\nlinks <- read_csv(\"data/resistance_mechanisms.csv\")\n```\n\nMy csv file contains three columns: source, target, value. Source is the origin of each data link. Given, my Sankey network has three columns, source is both the name of the of the antibiotic classes and the mechanisms. Target is the endpoint of each data link. This contains the mechanisms and resistance genes.Value is the relative thickness of each link.\n\n```{r}\n#First six lines of my data frame\nhead(links)\n```\n\nThe \\` in some of my gene names is read in as ? so first I replace the ? with ′\n\n```{r}\nlinks$target <- str_replace_all(links$target, \"\\\\?\", \"′\") \n```\n\nNext I created a one column data frame for all the nodes.The column name is labelled name and the observations are all the unique names from source and target.\n\n```{r}\nnodes <- data.frame(\n  name = unique(c(as.character(links$source), as.character(links$target))))\n```\n\nA second column was added to the nodes dataframe called group. This will be used to colour the Sankey Network links by group.\n\n```{r}\n# Grouping\nnodes$group <- case_when(\n  nodes$name == \"Aminoglycosides\" ~ \"Aminoglycosides\",\n  nodes$name == \"Fluoroquinolones\" ~ \"Fluoroquinolones\",\n  nodes$name == \"Tetracyclines\" ~ \"Tetracyclines\",\n  nodes$name == \"Phenicols\" ~ \"Phenicols\",\n  nodes$name == \"Sulfonamides & Trimethoprim\" ~ \"Sulfonamides\",\n  nodes$name == \"Nitrofurans\" ~ \"Nitrofurans\",\n  nodes$name == \"Macrolides\" ~ \"Macrolides\",\n  nodes$name %in% c(\"aac(3′)\", \"aadA\", \"aadB\", \"aadD\",\n                    \"aph(3′)\", \"aphA15\", \"rrsH*\", \"rsmG*\") ~ \"Aminoglycosides\",\n  nodes$name %in% c(\"gyrA*\", \"gyrB*\", \"parC*\", \"parE*\", \"qep\", \"qnr\", \"oqxAB\") ~ \"Fluoroquinolones\",\n  nodes$name %in% c(\"tetX\", \"tetM\", \"tetW\", \"tetA\", \"tetB\", \"tetC\", \"tetD\") ~ \"Tetracyclines\",\n  nodes$name %in% c(\"catB\", \"catII\", \"cmlA\", \"floR\") ~ \"Phenicols\",\n  nodes$name %in% c(\"dfr\", \"folP*\", \"sul1\", \"sul2\", \"sul3\", \"sul4\") ~ \"Sulfonamides\",\n  nodes$name %in% c(\"nfsA*\", \"nfsB*\", \"ahpF*\", \"ribB*\", \"ribE*\") ~ \"Nitrofurans\",\n  nodes$name %in% c(\"ermA\", \"ermB\", \"ermC\", \"ereA\", \"mphA\", \"mphB\", \"mefA\", \"mefB\", \"msrA\", \"msrD\") ~ \"Macrolides\",\n  TRUE ~ \"Other\"\n)\n```\n\nTwo additional columns were added, which contain an index for both the source and the target. The match function is used to match the position of the values that are being matched. As I understand it networkD3 uses an index system starting from 0, whereas base R starts from 1, hence the -1 is needed to generate an index system suitable for the function networkD3::sankeyNetwork().\n\n```{r}\n# ID mapping\nlinks$IDsource <- match(links$source, nodes$name) - 1\nlinks$IDtarget <- match(links$target, nodes$name) - 1\n\nlinks\n```\n\nSimilar to the nodes dataframe a group column was also added to the links dataframe.\n\n```{r}\n#Generate vector containing the group names for all the antibiotic classes\nclass <- c(\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\", \"Macrolides\")\n#Generate vector containing the group names for all the mechanisms\nmechanisms <- c(\"Enzymatic inactivation\", \"Target alteration\", \"Target protection\", \"Efflux pump\", \"Target replacement\", \"Reduced prodrug activation\")\n\n# Assign groups\nlinks$group <- case_when(\n  links$source %in% class ~ nodes$group[match(links$source, nodes$name)],\n  links$source %in% mechanisms ~ nodes$group[match(links$target, nodes$name)],\n  TRUE ~ \"Other\")\n```\n\nLastly I generated my colour scale. Here (as I understand it) because networkD3 uses Javascript code the colour scale also has to be written in Javascript. '.domain' defines each group that I want to apply each colour to.\n\n```{r colour}\nmy_color <- 'd3.scaleOrdinal()\n  .domain([\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \n           \"Phenicols\", \"Sulfonamides\", \"Nitrofurans\", \"Macrolides\", \"Other\"])\n  .range([\"#90CAF9\", \"#A5D6A7\", \"#D1C4E9\", \"#ffffb3\", \"#fb8072\", \"#fdb462\", \"#F8BBD0FF\", \"#E0E0E0\"]);'\n```\n\n### Sankey Network\n\nNow for the fun part generating the Sankey Network.\n\n```{r sankey1}\n# Sankey plot\nq <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  width = 900, height = 600\n)\nq\n```\n\nThere are a few things I don't like. The font size and type, the width of the nodes and having the resistance genes on top of the links.\n\nHere I've adjusted these four things within the sankeyNetwork function using the arguments fontSize, fontFamily, nodeWidth and sinksRight.\n\n```{r sankey2}\n# Sankey plot\np <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  fontSize = 12, fontFamily = \"Verdana\", nodeWidth = 60, sinksRight = FALSE, width = 900, height = 900\n)\np\n```\n\nIt's still not quite what I'd like. To my knowledge that is pretty much all that can be adjusted within the SankeyNetwork function. However, because the Sankey Network is an htmlwidget (you can check this using the class function) you can use the htmlwidge package to append labels.\n\n```{r class}\nclass(p)\n```\n\n### Using htmlwidgets to adjust the Sankey Network\n\nThe code below was adapted from the tutorial https://www.geeksforgeeks.org/r-language/how-to-add-axis-labels-using-networkd3-in-r/ and the response on this stack overflow post https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page\n\nHere I've added a title to my figure and a footnote.\n\n```{r}\n#prepend title\np1 <- htmlwidgets::prependContent(p, htmltools::tags$h1(htmltools::HTML(\"Resistance genes in <em>Escherichia coli</em>\"),\n  style = \"text-align:center; color:#1b2422; font-size:18px; font-family:Verdana;\"))\np1\n#append footnote\np2 <- htmlwidgets::appendContent(p1, htmltools::tags$p(\"* Genes with point mutations\", style = \"text-align:center; color:#666; font-size:12px; font-family:Verdana;\"))\np2\n```\n\nI also wanted to change the font style to bold for antibiotic classes and italics for the resistance genes. I got a bit of help from chatgpt for this piece of code.\n\n```{r}\n#The following function was generated using chapgpt\np3 <- htmlwidgets::onRender(p2, '\n  function(el, x) {\n    const boldNames = [\n      \"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\",\n      \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\",\n      \"Enzymatic inactivation\", \"Target alteration\",\n      \"Target protection\", \"Efflux pump\", \"Target replacement\",\n      \"Reduced prodrug activation\", \"Macrolides\"\n    ];\n\n    const italicSubstrings = [\n      \"aac\", \"aad\", \"aph\", \"rr\", \"rsm\", \"qep\", \"qnr\", \"tet\", \"cat\",\n      \"gyr\", \"par\", \"mdf\", \"fol\", \"dfr\", \"nfs\", \"cml\", \"flo\", \"oqx\", \"sul\",\n      \"erm\", \"ereA\", \"mph\", \"mef\", \"msr\", \"ahpF\", \"rib\"\n    ];\n\n    d3.select(el)\n      .selectAll(\".node text\")\n      .style(\"font-weight\", d => boldNames.includes(d.name) ? \"bold\" : \"normal\")\n      .style(\"font-style\", d =>\n        italicSubstrings.some(sub => d.name.includes(sub)) ? \"italic\" : \"normal\"\n      );\n  }\n')\n\np3\n```\n\n## Saving the Sankey Network\n\nIf you are trying this code or similar and want to save your plot as a png you will not be able to use ggsave Because the Sankey Network is an htmlwidget. First save your plot as an html and then take a screenshot using webshot.\n\n```{r, eval = FALSE}\nhtmlwidgets::saveWidget(p3, \"output/sankey.html\", selfcontained = TRUE)\nwebshot(\"output/sankey.html\", file = \"output/sankey_arg.png\", vwidth = 900, vheight = 900)\n```\n\nOne thing I haven't been able to work out is how remove the white space on either side and align the footer to the gene name column, when I save the plot as a png. If anyone reading this has any tips please email me or DM on LinkedIn.\n\n## References\n\nLastly here are some references I used for generating the resistance gene list:\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"sankey_amr.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","bibliography":["references.bib"],"csl":"nature-communications.csl","nocite":"@*\n"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}