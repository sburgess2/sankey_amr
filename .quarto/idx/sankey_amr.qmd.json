{"title":"Sankey diagrams to visualise *E. coli* resistance genes","markdown":{"yaml":{"bibliography":"references2.bib","csl":"nature-communications.csl","nocite":"@*\n"},"headingText":"Sankey diagrams to visualise *E. coli* resistance genes","containsRefs":false,"markdown":"\n\n\nThere are several R packages that enable Sankey diagrams to be generated. In these two examples I used the networkD3 and ggsankey packages. In this example a Sankey diagram was used to visualise the different resistance genes and mechanisms that E. coli uses to become resistant to six classes of antibiotics. A separate Sankey diagram was used to illustrate beta-lactam resistance as there are so many different beta-lactam resistance genes\n\n## Generating a Sankey diagram using networkD3\n\nThis Sankey diagram covers E. coli resistance to six classes of antibiotics (Aminoglycosides, Fluoroquinolones, Tetracyclines, Phenicols, Sulfonamides & Trimethoprim, \"Nitrofurans).\n\n### Packages\n\nIf you haven't done so already install the packages networkD3, tidyverse, htmlwidgets, manipulateWidget and webshot2.\n\nLoad the libraries\n\n```{r libraries, message = FALSE, warning = FALSE, output = FALSE}\nlibrary(networkD3)\nlibrary(tidyverse)\nlibrary(htmlwidgets)\nlibrary(manipulateWidget)\nlibrary(webshot2)\nlibrary(paletteer)\n```\n\n### Read in and prepare data\n\nThe following code was adapted from <https://r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html> (and a little bit of help from ChatGPT when I had trouble setting up the groups). Two data frames are needed to generate a Sankey diagram. One for the links and the other for the nodes. In the R Graph Gallery example, the links data frame was generated using the `data.frame()` function. Initially I tried this, but then it became too messy when I was adding multiple antibiotic classes so I read in a csv file.\n\n```{r readcsv}\nlinks <- read_csv(\"data/resistance_mechanisms.csv\")\n```\n\nMy csv file contains three columns: source, target, value. Source is the origin of each data link. Given, my Sankey diagram has three columns, source is both the name of the of the antibiotic classes and the mechanisms. Target is the endpoint of each data link. This contains the mechanisms and resistance genes. Value is the thickness of each link.\n\n```{r}\n#First six lines of my data frame\nhead(links)\n\n#Last six lines of my data frame\ntail(links)\n```\n\nThe \\` in some of my gene names is read in as ? so first I replaced the ? with ′\n\n```{r}\nlinks$target <- str_replace_all(links$target, \"\\\\?\", \"′\") \n```\n\nNext I created a one column data frame for all the nodes. The column name is labelled name and the observations are all the unique names from source and target.\n\n```{r}\nnodes <- data.frame(\n  name = unique(c(as.character(links$source), as.character(links$target))))\n```\n\nA second column was added to the nodes data frame called group. This will be used to colour the Sankey diagram links by group.\n\n```{r}\n# Grouping\nnodes$group <- case_when(\n  nodes$name == \"Aminoglycosides\" ~ \"Aminoglycosides\",\n  nodes$name == \"Fluoroquinolones\" ~ \"Fluoroquinolones\",\n  nodes$name == \"Tetracyclines\" ~ \"Tetracyclines\",\n  nodes$name == \"Phenicols\" ~ \"Phenicols\",\n  nodes$name == \"Sulfonamides & Trimethoprim\" ~ \"Sulfonamides\",\n  nodes$name == \"Nitrofurans\" ~ \"Nitrofurans\",\n  nodes$name == \"Macrolides\" ~ \"Macrolides\",\n  nodes$name %in% c(\"aac(3′)\", \"aadA\", \"aadB\", \"aadD\",\n                    \"aph(3′)\", \"aphA15\", \"rrsH*\", \"rsmG*\") ~ \"Aminoglycosides\",\n  nodes$name %in% c(\"gyrA*\", \"gyrB*\", \"parC*\", \"parE*\", \"qep\", \"qnr\", \"oqxAB\") ~ \"Fluoroquinolones\",\n  nodes$name %in% c(\"tetX\", \"tetM\", \"tetW\", \"tetA\", \"tetB\", \"tetC\", \"tetD\") ~ \"Tetracyclines\",\n  nodes$name %in% c(\"catB\", \"catII\", \"cmlA\", \"floR\") ~ \"Phenicols\",\n  nodes$name %in% c(\"dfr\", \"folP*\", \"sul1\", \"sul2\", \"sul3\", \"sul4\") ~ \"Sulfonamides\",\n  nodes$name %in% c(\"nfsA*\", \"nfsB*\", \"ahpF*\", \"ribB*\", \"ribE*\") ~ \"Nitrofurans\",\n  nodes$name %in% c(\"ermA\", \"ermB\", \"ermC\", \"ereA\", \"mphA\", \"mphB\", \"mefA\", \"mefB\", \"msrA\", \"msrD\") ~ \"Macrolides\",\n  TRUE ~ \"Other\"\n)\n```\n\nTwo additional columns were added, which contain an index for both the source and the target. The match function is used to match the position of the values that are being matched. As I understand it networkD3 uses an index system starting from 0, whereas base R starts from 1, hence the -1 is needed to generate an index system suitable for the function `networkD3::sankeyNetwork()`.\n\n```{r}\n# ID mapping\nlinks$IDsource <- match(links$source, nodes$name) - 1\nlinks$IDtarget <- match(links$target, nodes$name) - 1\n\nlinks\n```\n\nSimilar to the nodes data frame a group column was also added to the links data frame.\n\n```{r}\n#Generate vector containing the group names for all the antibiotic classes\nclass <- c(\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\", \"Macrolides\")\n#Generate vector containing the group names for all the mechanisms\nmechanisms <- c(\"Enzymatic inactivation\", \"Target alteration\", \"Target protection\", \"Efflux pump\", \"Target replacement\", \"Reduced prodrug activation\")\n\n# Assign groups\nlinks$group <- case_when(\n  links$source %in% class ~ nodes$group[match(links$source, nodes$name)],\n  links$source %in% mechanisms ~ nodes$group[match(links$target, nodes$name)],\n  TRUE ~ \"Other\")\n```\n\nLastly I generated my colour scale. Here (as I understand it) because networkD3 uses Javascript code the colour scale also has to be written in Javascript. '.domain' defines each group that I want to apply each colour to.\n\n```{r colour}\nmy_color <- 'd3.scaleOrdinal()\n  .domain([\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \n           \"Phenicols\", \"Sulfonamides\", \"Nitrofurans\", \"Macrolides\", \"Other\"])\n  .range([\"#90CAF9\", \"#A5D6A7\", \"#D1C4E9\", \"#ffffb3\", \"#fb8072\", \"#fdb462\", \"#F8BBD0FF\", \"#E0E0E0\"]);'\n```\n\n### Sankey diagram\n\nNow for the fun part generating the Sankey diagram.\n\n```{r sankey1, message = FALSE}\n# Sankey plot\nq <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  width = 900, height = 900,\n  nodeWidth = 60\n)\nq\n```\n\nThere are a few things I don't like. The font size and type, as well as having the resistance genes on top of the links.\n\nHere I've adjusted these three things within the `sankeyNetwork()` function using the arguments fontSize, fontFamily, and sinksRight.\n\n```{r sankey2, message = FALSE}\n# Sankey plot\np <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  fontSize = 12, fontFamily = \"Verdana\", nodeWidth = 60, sinksRight = FALSE, width = 900, height = 900\n)\np\n```\n\nIt's still not quite what I'd like. To my knowledge that is pretty much all that can be adjusted within the `SankeyNetwork()` function. However, because the Sankey Network is an htmlwidget (you can check this using the class function) you can use the htmlwidge package to append labels.\n\n```{r class}\nclass(p)\n```\n\n### Using htmlwidgets to adjust the Sankey diagram\n\nThe code below was adapted from the tutorial <https://www.geeksforgeeks.org/r-language/how-to-add-axis-labels-using-networkd3-in-r/> and the response on this stack overflow post <https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page>\n\nHere I've added a title to my diagram.\n\n```{r prepend}\n#prepend title\np1 <- htmlwidgets::prependContent(p, htmltools::tags$h1(htmltools::HTML(\"Resistance genes in <em>Escherichia coli</em>\"),\n  style = \"text-align:center; color:#1b2422; font-size:18px; font-family:Verdana;\"))\np1\n```\n\nHere I've added a footnote to my diagram.\n\n```{r append}\n#append footnote\np2 <- htmlwidgets::appendContent(p1, htmltools::tags$p(\"* Genes with point mutations\", style = \"text-align:center; color:#666; font-size:12px; font-family:Verdana;\"))\np2\n```\n\nI also wanted to change the font style to bold for the antibiotic classes and italics for the resistance genes. I got a bit of help from ChatGPT for this piece of code.\n\n```{r}\n#The following function was generated using chapgpt\np3 <- htmlwidgets::onRender(p2, '\n  function(el, x) {\n    const boldNames = [\n      \"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\",\n      \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\",\n      \"Enzymatic inactivation\", \"Target alteration\",\n      \"Target protection\", \"Efflux pump\", \"Target replacement\",\n      \"Reduced prodrug activation\", \"Macrolides\"\n    ];\n\n    const italicSubstrings = [\n      \"aac\", \"aad\", \"aph\", \"rr\", \"rsm\", \"qep\", \"qnr\", \"tet\", \"cat\",\n      \"gyr\", \"par\", \"mdf\", \"fol\", \"dfr\", \"nfs\", \"cml\", \"flo\", \"oqx\", \"sul\",\n      \"erm\", \"ereA\", \"mph\", \"mef\", \"msr\", \"ahpF\", \"rib\"\n    ];\n\n    d3.select(el)\n      .selectAll(\".node text\")\n      .style(\"font-weight\", d => boldNames.includes(d.name) ? \"bold\" : \"normal\")\n      .style(\"font-style\", d =>\n        italicSubstrings.some(sub => d.name.includes(sub)) ? \"italic\" : \"normal\"\n      );\n  }\n')\n\np3\n```\n\n## Saving the Sankey diagram\n\nIf you are trying this code or similar and want to save your plot as a png you will not be able to use `ggsave()` function because the Sankey Network is an htmlwidget. First save your plot as an html and then take a screenshot using webshot.\n\n```{r, eval = FALSE}\nhtmlwidgets::saveWidget(p3, \"output/sankey.html\", selfcontained = TRUE)\nwebshot(\"output/sankey.html\", file = \"output/sankey_arg.png\", vwidth = 900, vheight = 900)\n```\n\nOne thing I haven't been able to work out is how remove the white space on either side and align the footer to the gene name column, when I save the plot as a png. When I tried to use style = \"text-align:right\" the footnote disappeared off the page in the png. If anyone reading this has any tips please email me or DM on LinkedIn.\n\nLastly here are some references I used for generating the resistance gene list:\n\n[@mounsey2024]\n\n## Generating a Sankey diagram using ggsankey to visualise *E. coli* genes which confer resistance to the beta-lactams.\n\nIn this example I used the package ggsankey to generate a Sankey diagram. Visualising these resistance genes was not as straight forward as the other resistance genes visualised in the network above. There are multiple enzyme types, which all have a large number of variants. Certain variants have a wider range of resistance compared with their parent types, which adds in more complexity. For this reason I started with the genes on the left hand side.\n\n### Packages\n\nInstall the packages ggsankey, showtext and sysfonts, glue, patchwok and ggtext then load the libraries\n\n```{r libraries2, message = FALSE, warning = FALSE, output = FALSE}\n#remotes::install_github(\"davidsjoberg/ggsankey\")\n\nlibrary(ggsankey)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(ggtext)\n```\n\n### Read in and prepare data\n\nNext I read in the data.I generated this dataset manually. The publications used for generated this dataset are listed in the bibliography.\n\n```{r readcsv2}\ndf <- read_csv(\"data/betalactams_gsankey.csv\")\n```\n\nMy csv file contains three columns: \"gene\", \"mechanism\", \"subclass\". This data is set up differently to the first Sankey diagram in that each column will be a column in the Sankey diagram. The first column \"gene\" is the name of each resistance gene. The second column is the mechanism or type of enzyme. So instead of having \"enzymatic inactivation\" I divided the beta-lactamases into \"Penicillinases\", \"Oxcillinases\", \"IRT\" (inhibitor resistant TEM), \"ESBL\", \"AmpC\", and \"Carbapenemases\". In addition I included the mechanisms \"reduced permeability\" and \"efflux pump\". The third column is the antibiotic subclass. Given most genes confer resistance to multiple sub classes there are multiple rows for each gene.\n\n```{r}\n#Structure of my dataframe\nstr(df)\n\n#First six lines of my data frame\nhead(df)\n\n#Last six lines of my data frame\ntail(df)\n\n#The unique mechanisms / enzyme types\nunique(df$mechanism)\n\n#The unique subclasses of antibiotics\nunique(df$subclass)\n```\n\nNext, the data was converted to a long format using a function `make_long()` from the ggsankey package. This long format contains columns that define how the links flow through the diagram:\n\n-   `x`: the name of the current column (called a stage) on the x axis.\n\n-   `next_x`: the name of the next stage `x` links to (NA for the final stage which is why the subclass rows have NA values).\n\n-   `node`: the value at the starting node.\n\n-   `next_node`: the value at the connecting node.\n\nThe following code was adapted from https://r-graph-gallery.com/package/ggsankey.html\n\n```{r df_long}\ndf_long <- df %>%\n        make_long(gene, mechanism, subclass)\n\nhead(df_long)\n```\n\nHere is a first look at how the data looks when it is plotted.\n\n```{r ggsankey1}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node)) +\n        geom_sankey()\n```\n\nHere is the same plot with the links and nodes coloured by node.\n\n```{r ggsankey2}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey() +\n        scale_fill_discrete(drop = FALSE)\n```\n\nThere is a lot to tidy up. First I removed the grey background, the grid, and x and y axis labels. I find that using `theme_void()` is the easiest way to do this. I also removed the legend using `show.legend = FALSE`.\n\n```{r ggsankey3}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey(show.legend = FALSE) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n        \n```\n\nNext I addd node labels onto the Sankey diagram.\n\n```{r ggsankey4}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey(show.legend = FALSE) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n        \n```\n\nI wanted to change the colours of the links so that each gene would be coloured according to its mechanism using a more visually appealing colour palette (IMO) compared with the default colours. First an extra column was added to the long dataframe to group the genes and mechanism rows by mechanism.\n\n```{r}\nmechanism_lookup <- df %>%\n        select(gene, mechanism) %>%\n        rename(node = gene) %>%\n        bind_rows(df %>% distinct(mechanism) %>% rename(node = mechanism) %>% mutate(mechanism = node)) %>%\n        distinct()\n\n# Add mechanism info to the long data\ndf_long_coloured <- df_long %>%\n        left_join(mechanism_lookup, by = \"node\")\n\nhead(df_long_coloured)\n```\n\nI selected my colours using https://r-graph-gallery.com/color-palette-finder. Shades of blue from the `seeblau` palette were used for the \"Reduced permeability\" and \"Efflux pump\" mechanisms. Shades of yellow, orange, and red from the `amber_material` palette were used for the beta-lactamase enzyme types.\n\n```{r}\n#The two palettes that I selected my colours from:\npaletteer_d(\"unikn::pal_seeblau\")\npaletteer_d(\"ggsci::amber_material\")\n```\n\nI defined my colour palette. All the antibiotic subclasses were defined as \"other\".\n\n```{r}\nmy_colour <- c(\n        \"Reduced permeability\" = \"#A6E1F4FF\",      \n        \"Efflux pump\" = \"#0F7BA2FF\",         \n        \"Penicillinases\" = \"#FFECB3FF\",\n        \"Oxcillinases\" = \"#FFD54FFF\", \n        \"IRT\" = \"#FFC107FF\", \n        \"ESBL\" = \"#FFA000FF\",\n        \"AmpC\" = \"#FF6F00FF\", \n        \"Carbapenemases\" = \"#DA291CFF\",\n        \"Other\" = \"#B3B7B8FF\" )\n```\n\nI filled the links by the new mechanism variable.\n\n```{r}\nggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = mechanism)) +\n        geom_sankey(show.legend = FALSE) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n```\n\nAlthough I now have the same colour for each mechanism, my colour palette has not been used. `scale_fill_discrete()` was changed to `scale_fill_manual()`. The colours on the links were very bright so to make them slightly transparent I used the argument `flow.alpha`.\n\n```{r}\nggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = mechanism)) +\n        geom_sankey(show.legend = FALSE, flow.alpha = 0.7) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_manual(values = my_colour) +\n        theme_void()\n```\n\nNext I left justified the first column labels and right justified the second column labels. This code was adapted from https://stackoverflow.com/questions/78240951/adjust-labels-on-individual-nodes-in-sankey-diagram-using-ggsankey. Here the function `stage()` was used to control the stage at which the aesthetics should be mapped.\n\n```{r}\nggplot(df_long_coloured, aes(\n        x = x, next_x = next_x,\n        node = node, next_node = next_node,\n        fill = mechanism, label = node)) +\n        geom_sankey(flow.alpha = 0.7,\n                show.legend = FALSE) +\n        geom_sankey_text(aes(\n          x = stage(x, after_stat = x + 0.1 * case_when(\n                                                  x == 1 ~ -1,    \n                                                  x == 3 ~ 1,     \n                                                  .default = 0)),\n                    hjust = case_when(x == \"gene\" ~ 1,        \n                            x == \"subclass\" ~ 0, \n                            .default = 0.5))) +\n        theme_void() +\n        scale_fill_manual(values = my_colour)\n```\n\nNext I reordered the nodes. See https://github.com/davidsjoberg/ggsankey/issues/7 for more explanation on how to reorder nodes.\n\n```{r order}\ndf_long_coloured2 <- df_long_coloured\n\ndf_long_coloured2$node <- factor(\n  df_long_coloured$node, \n  levels = rev(c(\n    \"ompC*\", \"Reduced permeability\", \"ompF*\", \n    \"acrAB-tolC*\", \"Efflux pump\", \n    \"blaTEM-1\", \"Penicillinases\", \"blaSHV-1\", \n    \"blaOXA-1\", \"Oxcillinases\", \n    \"blaTEM-30\", \"IRT\", \n    \"blaTEM-10\", \"ESBL\", \"blaSHV-12\", \"blaCTX-M-15\", \n    \"blaGES-3\", \"blaVEB-1\", \"blaROB-1\", \"blaTLA-1\", \n    \"ampC*\", \"AmpC\", \n    \"blaCMY-2\", \"blaDHA-1\", \"blaFOX-1\", \"blaACC-4\", \n    \"blaKPC-18\", \"Carbapenemases\", \n    \"blaOXA-48\", \"blaNDM-1\", \"blaIMP-4\",\n    \"NS penicillins\", \"ES penicillins\", \"Monobactams\", \n    \"1G cephalosporins\", \"2G cephalosporins\", \n    \"3G cephalosporins\", \"4G cephalosporins\", \"Carbapenems\"))\n)\n\ndf_long_coloured2$next_node <- factor(\n  df_long_coloured$next_node, \n  levels = rev(c(\"Reduced permeability\", \"Efflux pump\", \"Penicillinases\", \n    \"Oxcillinases\", \"IRT\", \"ESBL\", \"AmpC\", \"Carbapenemases\",\n    \"NS penicillins\", \"ES penicillins\",\"Monobactams\",\"1G cephalosporins\",\n    \"Carbapenems\",\"2G cephalosporins\",\"3G cephalosporins\", \"4G cephalosporins\"))\n)\n```\n\nThe plot with the reordered nodes.\n\n```{r}\nggplot(df_long_coloured2, aes(\n        x = x, next_x = next_x,\n        node = node, next_node = next_node,\n        fill = mechanism, label = node)) +\n        geom_sankey(flow.alpha = 0.7,\n                show.legend = FALSE) +\n        geom_sankey_text(aes(\n          x = stage(x, after_stat = x + 0.1 *case_when(\n                                                  x == 1 ~ -1,    \n                                                  x == 3 ~ 1,     \n                                                  .default = 0)),\n                    hjust = case_when(x == \"gene\" ~ 1,        \n                            x == \"subclass\" ~ 0, \n                            .default = 0.5))) +\n        theme_void() +\n        scale_fill_manual(values = my_colour)\n```\n\nI italicised the gene names and changed the mechanisms to a bold style using plotmath syntax (if you know of other ways to do this please let me know). First I added another column, which will be used for plotmath syntax, called label_pms. For example to generate `x` in italic font is written as italic(x). To see more on plotmath syntax see this link https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/plotmath. The `paste()` function was used to join strings together with no separator. I joined either the string `\"italic('\"`, `\"bold('\"`, or `\"plain('\"` with the node value (so the gene name), and the string `\"')\"`. Then I changed those labels with a *bla* gene so that the enzyme type was written in subscript. The function `str_replace_all()` was used to replace any text with the literal string `italic\\\\(` followed by `bla` with the pattern of three word characters`\\\\w{3}`, a literal hyphen `-`, one word character `\\\\w` followed by one or more digits `\\\\d` or (`|`) the pattern of three word characters, hyphen, multiple digits.\n\n```{r}\n#Add a new column called label_pms with the plotmath syntax for font styling\ndf_long_coloured3 <- df_long_coloured2 %>%\n  mutate(label_pms = case_when(\n    x == \"gene\" ~ paste0(\"italic('\", node, \"')\"),          \n    x == \"mechanism\" ~ paste0(\"bold('\", node, \"')\"),       \n    x == \"subclass\" ~ paste0(\"plain('\", node, \"')\")        \n  ))\n\n#Change the bla gene labels to subscript after bla\ndf_long_coloured3 <- df_long_coloured3 %>%\n  mutate(label_pms = str_replace_all(label_pms,                                \"italic\\\\('(bla)(\\\\w{3}-\\\\w-\\\\d+|\\\\w{3}-\\\\d+)'\\\\)\", \n                               \"italic('\\\\1')[\\\\2]\"))\n```\n\nNote that when you change the order of your nodes, you also need to set the levels for your labels so that they match the same order as your nodes.\n\n```{r}\n\ndf_long_coloured3$label_pms <- factor(\n  df_long_coloured3$label_pms,\n  levels = rev(c(\n    \"italic('ompC*')\",\n    \"bold('Reduced permeability')\",\n    \"italic('ompF*')\",\n    \"italic('acrAB-tolC*')\",\n    \"bold('Efflux pump')\",\n    \"italic('bla')[TEM-1]\",\n    \"bold('Penicillinases')\",\n    \"italic('bla')[SHV-1]\",\n    \"italic('bla')[OXA-1]\",\n    \"bold('Oxcillinases')\",\n    \"italic('bla')[TEM-30]\",\n    \"bold('IRT')\",\n    \"italic('bla')[TEM-10]\",\n    \"bold('ESBL')\",\n    \"italic('bla')[SHV-12]\",\n    \"italic('bla')[CTX-M-15]\",\n    \"italic('bla')[GES-3]\",\n    \"italic('bla')[VEB-1]\",\n    \"italic('bla')[ROB-1]\",\n    \"italic('bla')[TLA-1]\",\n    \"italic('ampC*')\",\n    \"bold('AmpC')\",\n    \"italic('bla')[CMY-2]\",\n    \"italic('bla')[DHA-1]\",\n    \"italic('bla')[FOX-1]\",\n    \"italic('bla')[ACC-4]\",\n    \"italic('bla')[KPC-18]\",\n    \"bold('Carbapenemases')\",\n    \"italic('bla')[OXA-48]\",\n    \"italic('bla')[NDM-1]\",\n    \"italic('bla')[IMP-4]\",\n    # Now the antibiotic subclasses in your desired order:\n    \"plain('NS penicillins')\",\n    \"plain('ES penicillins')\",\n    \"plain('Monobactams')\",\n    \"plain('1G cephalosporins')\",\n    \"plain('2G cephalosporins')\",\n    \"plain('3G cephalosporins')\",\n    \"plain('4G cephalosporins')\",\n    \"plain('Carbapenems')\"\n  ))\n)\n```\n\nWhen calling the `ggplot()` function I then added the arguments `label = label_pms` and `parse = TRUE`, to parse it as plotmath syntax.\n\n```{r}\nps <- ggplot(df_long_coloured3, aes(\n    x = x, next_x = next_x,\n    node = node, next_node = next_node,\n    fill = mechanism, label_pms = node)) +\n  geom_sankey(flow.alpha = 0.7, show.legend = FALSE) +\n  geom_sankey_text(\n    aes(label = label_pms,\n        x = stage(x, after_stat = x + 0.1 *\n          case_when(\n            x == 1 ~ -1,\n            x == 3 ~ 1,\n            .default = 0)),\n        hjust = case_when(x == \"gene\" ~ 1,\n                          x == \"subclass\" ~ 0,\n                          .default = 0.5)),\n    parse = TRUE) +\n  theme_void() +\n  scale_fill_manual(values = my_colour)\n\nps\n```\n\nLastly I added a caption.\n\n```{r caption1}\ncaption1 <- \"Beta-lactam resistance in <i>E. coli</i> predominantly occurs through the acquisition of genes encoding beta-lactamases (shades of yellow, orange, and red, according to enzyme group), but can also occur through mutations in genes encoding outer membrane proteins (light blue) or efflux pumps (dark blue); genes with mutations are marked with an asterisk. This Sankey diagram illustrates how beta-lactam resistance genes can be grouped by mechanism (reduced permeability, efflux pump and enzymatic inactivation by different beta-lactamases) and the subclasses of beta-lactams (NS - narrow spectrum and ES - extended spectrum penicllins; monobactams; 1G - first generation, 2G - second generation, 3G - third generation, 4G - fourth generation; and carbapenems) to which they confer resistance. The beta-lactamase enzymes have been grouped into penicillinases, oxacillinases, IRT (inhibitor resistant TEM), ESBL, AmpC, and carbapenemases. One representative gene variant is shown. However, resistance profiles can vary between different variants of the same enzyme and between different enzymes from the same group.\"\n\n\npsc <- ps +\n  labs(caption = caption1) +\n  theme(plot.caption.position = \"plot\", \n        plot.caption = element_textbox_simple(\n          hjust = 0.5, \n          margin = margin(t = 40, r = 5, b = 5, l = 5)))\npsc\n#ggsave(\"output/ggsankey_final.png\", plot = psc, width = 12, height = 0.67 * 12, dpi = 300)\n```\n\nBeta-lactamase enzymes can be grouped by Ambler class (based on the amino acid sequence) or the Bush functional group (based on substrate and inhibitor activity). I'd like people to use the Sankey diagram as a reference, so I thought it would be useful to also add in a heat map to identify the Ambler class and Bush functional group of each enzyme. This will be attached to the Sankey diagram.\n\n```{r}\ncg <- read_csv(\"data/class_group.csv\")\n\ncg_long <- cg %>%\n        pivot_longer(cols = c(\"Ambler class\", \"Functional group\"),\n                     names_to = \"Category\", values_to = \"Value\")\n\ncg_long2 <- cg_long\n\ncg_long2$Enzyme <- factor(\n  cg_long2$Enzyme,\n  levels = rev(c(\"TEM-1\", \"SHV-1\", \"OXA-1\", \"TEM-30\", \"TEM-10\", \"SHV-12\", \"CTX-M-15\", \"GES-3\", \"ROB-1\", \"TLA-1\", \"AmpC\", \"CMY-2\", \"DHA-1\", \"FOX-1\", \"ACC-4\", \"KPC-18\", \"OXA-48\", \"NDM-1\", \"IMP-4\")))\n\nggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +\n        geom_tile(color = \"white\", show.legend = FALSE) +\n        geom_text(aes(label = Value), color = \"white\", size = 4) +      \n        coord_equal() +\n        scale_fill_paletteer_d(\"impressionist.colors::la_recolte_des_foins_eragny\") +\n        scale_x_discrete(position = \"top\", labels = label_wrap_gen(10)) +\n        theme_minimal() +\n        theme(axis.title = element_blank(),\n                axis.text.y = element_text(size = 8),\n\n                              panel.grid = element_blank()) \n\n\n```\n\nThe column widths were too narrow to fit the values and the axis title. So I removed `coord_equal()`, which makes the the length and the width the same for each tile. Instead I used `coord_fixed()` to set the ratio.\n\n```{r}\nph <- ggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +\n        geom_tile(color = \"white\", show.legend = FALSE) +\n        geom_text(aes(label = Value), color = \"white\", size = 4) +      \n        scale_fill_paletteer_d(\"impressionist.colors::la_recolte_des_foins_eragny\") +\n        scale_x_discrete(position = \"top\", labels = label_wrap_gen(10)) +\n        coord_fixed(ratio = 0.3) +\n        theme_minimal(base_size = 6) +\n        theme(axis.title = element_blank(),\n                axis.text.y = element_text(size = 8),\n              panel.grid = element_blank()) \n\nph\n```\n\nI also generated a caption for this plot\n\n```{r caption2}\ncaption2 <- \"Beta-lactamases can be grouped according to their Ambler class and Bush functional group. Ambler classes are based on amino acid sequence similarity (doi: 10.1042/bj2760269), and Bush functional groups are based on substrate and inhibitor profiles (doi:10.1128/AAC.01009-09).\"\n\nphc <- ph + labs(caption = caption2) +\n  theme(plot.caption.position = \"plot\", \n        plot.caption = element_textbox_simple(\n          lineheight = 0.5,\n          hjust = 0,\n          margin = margin(t = 50, r = 10, b = 5, l = 10)))\n        #plot.margin = margin(t = 5, r = 10, b = 40, l = 10))\n\n#ggsave(\"output/heatmap_final.png\", plot = phc, width = 12, height = 0.67 * 12, dpi = 300)\n```\n\nI joined the Sankey diagram and the heatmap together using the patchwork library\n\n```{r patchwork}\np_join <- phc + psc\n```\n\nNext I added the title and subtitle. For adding titles and customising ggplots I would recommend Nicola Rennie's book 'The Art of Data Visualization with ggplot2\"\n\n```{r title}\ntitle <- \"Beta-lactam resistance in <i>Escherichia coli</i>\"\n```\n\nFinally I added my social media and business icons. This code was adapted from Rennie, Nicola. 2023. “Adding Social Media Icons to Charts with {Ggplot2}.” July 27, 2023. https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n```{r icons}\n\nsysfonts::font_add_google(name = \"Baloo 2\", family = \"baloo\")\nsysfonts::font_add(\n  family = \"Font Awesome 7 Brands\",\n  regular = \"fonts/fontawesome-free-7.1.0/otfs/Font-Awesome-7-Brands-Regular-400.otf\"\n)\nshowtext_auto()  # Only need this ONCE, after all fonts are added\nshowtext_opts(dpi = 300)\n\nbrand_font <- \"baloo\"\nbrand_color <- \"#55692f\"\n\ngithub_icon <- \"&#xf09b\"\ngithub_username <- \"sburgess2\"\nlinkedin_icon <- \"&#xf08c\"\nlinkedin_username <- \"sara-burgess\"\n\n#img = image, src = source, span is a span tag for inline styling\nsocial_caption <- glue(\n  \"<img src='logo/GreenhoodLogoMark.png' width='20' height='14.84'/> <span style='color: {brand_color};'><strong> Sara Burgess</strong></span> |\",\n  \"<span style='font-family:\\\"Font Awesome 7 Brands\\\";'>{github_icon};</span> \",\n  \"<span style='color: #000000'>{github_username}</span> | \",\n  \"<span style='font-family:\\\"Font Awesome 7 Brands\\\";'>{linkedin_icon};</span> \",\n  \"<span style='color: #000000'>{linkedin_username}</span>\"\n)\n```\n\nThis is what my caption looks like without the plot. As described in Nicole Rennie's blog the `element_text_box_simple()` function is added so it can enable Markdown and/or HTML code. The `element_text_box()` function is very similar but it does not have any default values.\n\n```{r}\nggplot() +\n  labs(caption = social_caption, title = title) +\n  theme(plot.caption = element_textbox_simple(),\n        plot.title = element_textbox_simple())\n```\n\nNext I added my caption to the plot. I have used `plot_annotation()` to add the caption because, I'm using the library patchwork to join the two plots together.\n\n```{r}\n#| label: final_figure\n#| fig-width: 18\n#| fig-height: 10\n#| warning: false\n#Note this results in a caption twice under each plot\np_final <- p_join +\n  plot_annotation(caption = social_caption, title = title) &\n  theme(\n    plot.caption = element_textbox_simple(\n  margin = margin(t = 30, r = 10, b = 20, l = 5),\n  size = 8),\n    plot.title = element_textbox_simple(),\n    base_size = 6)\n\np_final\n\n#ggsave(\"output/hm_ggsankey_final.png\", plot = p_final, width = 12, height = 0.67 * 12, dpi = 300)\n```\n","srcMarkdownNoYaml":"\n\n## Sankey diagrams to visualise *E. coli* resistance genes\n\nThere are several R packages that enable Sankey diagrams to be generated. In these two examples I used the networkD3 and ggsankey packages. In this example a Sankey diagram was used to visualise the different resistance genes and mechanisms that E. coli uses to become resistant to six classes of antibiotics. A separate Sankey diagram was used to illustrate beta-lactam resistance as there are so many different beta-lactam resistance genes\n\n## Generating a Sankey diagram using networkD3\n\nThis Sankey diagram covers E. coli resistance to six classes of antibiotics (Aminoglycosides, Fluoroquinolones, Tetracyclines, Phenicols, Sulfonamides & Trimethoprim, \"Nitrofurans).\n\n### Packages\n\nIf you haven't done so already install the packages networkD3, tidyverse, htmlwidgets, manipulateWidget and webshot2.\n\nLoad the libraries\n\n```{r libraries, message = FALSE, warning = FALSE, output = FALSE}\nlibrary(networkD3)\nlibrary(tidyverse)\nlibrary(htmlwidgets)\nlibrary(manipulateWidget)\nlibrary(webshot2)\nlibrary(paletteer)\n```\n\n### Read in and prepare data\n\nThe following code was adapted from <https://r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html> (and a little bit of help from ChatGPT when I had trouble setting up the groups). Two data frames are needed to generate a Sankey diagram. One for the links and the other for the nodes. In the R Graph Gallery example, the links data frame was generated using the `data.frame()` function. Initially I tried this, but then it became too messy when I was adding multiple antibiotic classes so I read in a csv file.\n\n```{r readcsv}\nlinks <- read_csv(\"data/resistance_mechanisms.csv\")\n```\n\nMy csv file contains three columns: source, target, value. Source is the origin of each data link. Given, my Sankey diagram has three columns, source is both the name of the of the antibiotic classes and the mechanisms. Target is the endpoint of each data link. This contains the mechanisms and resistance genes. Value is the thickness of each link.\n\n```{r}\n#First six lines of my data frame\nhead(links)\n\n#Last six lines of my data frame\ntail(links)\n```\n\nThe \\` in some of my gene names is read in as ? so first I replaced the ? with ′\n\n```{r}\nlinks$target <- str_replace_all(links$target, \"\\\\?\", \"′\") \n```\n\nNext I created a one column data frame for all the nodes. The column name is labelled name and the observations are all the unique names from source and target.\n\n```{r}\nnodes <- data.frame(\n  name = unique(c(as.character(links$source), as.character(links$target))))\n```\n\nA second column was added to the nodes data frame called group. This will be used to colour the Sankey diagram links by group.\n\n```{r}\n# Grouping\nnodes$group <- case_when(\n  nodes$name == \"Aminoglycosides\" ~ \"Aminoglycosides\",\n  nodes$name == \"Fluoroquinolones\" ~ \"Fluoroquinolones\",\n  nodes$name == \"Tetracyclines\" ~ \"Tetracyclines\",\n  nodes$name == \"Phenicols\" ~ \"Phenicols\",\n  nodes$name == \"Sulfonamides & Trimethoprim\" ~ \"Sulfonamides\",\n  nodes$name == \"Nitrofurans\" ~ \"Nitrofurans\",\n  nodes$name == \"Macrolides\" ~ \"Macrolides\",\n  nodes$name %in% c(\"aac(3′)\", \"aadA\", \"aadB\", \"aadD\",\n                    \"aph(3′)\", \"aphA15\", \"rrsH*\", \"rsmG*\") ~ \"Aminoglycosides\",\n  nodes$name %in% c(\"gyrA*\", \"gyrB*\", \"parC*\", \"parE*\", \"qep\", \"qnr\", \"oqxAB\") ~ \"Fluoroquinolones\",\n  nodes$name %in% c(\"tetX\", \"tetM\", \"tetW\", \"tetA\", \"tetB\", \"tetC\", \"tetD\") ~ \"Tetracyclines\",\n  nodes$name %in% c(\"catB\", \"catII\", \"cmlA\", \"floR\") ~ \"Phenicols\",\n  nodes$name %in% c(\"dfr\", \"folP*\", \"sul1\", \"sul2\", \"sul3\", \"sul4\") ~ \"Sulfonamides\",\n  nodes$name %in% c(\"nfsA*\", \"nfsB*\", \"ahpF*\", \"ribB*\", \"ribE*\") ~ \"Nitrofurans\",\n  nodes$name %in% c(\"ermA\", \"ermB\", \"ermC\", \"ereA\", \"mphA\", \"mphB\", \"mefA\", \"mefB\", \"msrA\", \"msrD\") ~ \"Macrolides\",\n  TRUE ~ \"Other\"\n)\n```\n\nTwo additional columns were added, which contain an index for both the source and the target. The match function is used to match the position of the values that are being matched. As I understand it networkD3 uses an index system starting from 0, whereas base R starts from 1, hence the -1 is needed to generate an index system suitable for the function `networkD3::sankeyNetwork()`.\n\n```{r}\n# ID mapping\nlinks$IDsource <- match(links$source, nodes$name) - 1\nlinks$IDtarget <- match(links$target, nodes$name) - 1\n\nlinks\n```\n\nSimilar to the nodes data frame a group column was also added to the links data frame.\n\n```{r}\n#Generate vector containing the group names for all the antibiotic classes\nclass <- c(\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\", \"Macrolides\")\n#Generate vector containing the group names for all the mechanisms\nmechanisms <- c(\"Enzymatic inactivation\", \"Target alteration\", \"Target protection\", \"Efflux pump\", \"Target replacement\", \"Reduced prodrug activation\")\n\n# Assign groups\nlinks$group <- case_when(\n  links$source %in% class ~ nodes$group[match(links$source, nodes$name)],\n  links$source %in% mechanisms ~ nodes$group[match(links$target, nodes$name)],\n  TRUE ~ \"Other\")\n```\n\nLastly I generated my colour scale. Here (as I understand it) because networkD3 uses Javascript code the colour scale also has to be written in Javascript. '.domain' defines each group that I want to apply each colour to.\n\n```{r colour}\nmy_color <- 'd3.scaleOrdinal()\n  .domain([\"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\", \n           \"Phenicols\", \"Sulfonamides\", \"Nitrofurans\", \"Macrolides\", \"Other\"])\n  .range([\"#90CAF9\", \"#A5D6A7\", \"#D1C4E9\", \"#ffffb3\", \"#fb8072\", \"#fdb462\", \"#F8BBD0FF\", \"#E0E0E0\"]);'\n```\n\n### Sankey diagram\n\nNow for the fun part generating the Sankey diagram.\n\n```{r sankey1, message = FALSE}\n# Sankey plot\nq <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  width = 900, height = 900,\n  nodeWidth = 60\n)\nq\n```\n\nThere are a few things I don't like. The font size and type, as well as having the resistance genes on top of the links.\n\nHere I've adjusted these three things within the `sankeyNetwork()` function using the arguments fontSize, fontFamily, and sinksRight.\n\n```{r sankey2, message = FALSE}\n# Sankey plot\np <- sankeyNetwork(\n  Links = links, Nodes = nodes,\n  Source = \"IDsource\", Target = \"IDtarget\",\n  Value = \"value\", NodeID = \"name\",\n  NodeGroup = \"group\", LinkGroup = \"group\",\n  colourScale = my_color,\n  fontSize = 12, fontFamily = \"Verdana\", nodeWidth = 60, sinksRight = FALSE, width = 900, height = 900\n)\np\n```\n\nIt's still not quite what I'd like. To my knowledge that is pretty much all that can be adjusted within the `SankeyNetwork()` function. However, because the Sankey Network is an htmlwidget (you can check this using the class function) you can use the htmlwidge package to append labels.\n\n```{r class}\nclass(p)\n```\n\n### Using htmlwidgets to adjust the Sankey diagram\n\nThe code below was adapted from the tutorial <https://www.geeksforgeeks.org/r-language/how-to-add-axis-labels-using-networkd3-in-r/> and the response on this stack overflow post <https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page>\n\nHere I've added a title to my diagram.\n\n```{r prepend}\n#prepend title\np1 <- htmlwidgets::prependContent(p, htmltools::tags$h1(htmltools::HTML(\"Resistance genes in <em>Escherichia coli</em>\"),\n  style = \"text-align:center; color:#1b2422; font-size:18px; font-family:Verdana;\"))\np1\n```\n\nHere I've added a footnote to my diagram.\n\n```{r append}\n#append footnote\np2 <- htmlwidgets::appendContent(p1, htmltools::tags$p(\"* Genes with point mutations\", style = \"text-align:center; color:#666; font-size:12px; font-family:Verdana;\"))\np2\n```\n\nI also wanted to change the font style to bold for the antibiotic classes and italics for the resistance genes. I got a bit of help from ChatGPT for this piece of code.\n\n```{r}\n#The following function was generated using chapgpt\np3 <- htmlwidgets::onRender(p2, '\n  function(el, x) {\n    const boldNames = [\n      \"Aminoglycosides\", \"Fluoroquinolones\", \"Tetracyclines\",\n      \"Phenicols\", \"Sulfonamides & Trimethoprim\", \"Nitrofurans\",\n      \"Enzymatic inactivation\", \"Target alteration\",\n      \"Target protection\", \"Efflux pump\", \"Target replacement\",\n      \"Reduced prodrug activation\", \"Macrolides\"\n    ];\n\n    const italicSubstrings = [\n      \"aac\", \"aad\", \"aph\", \"rr\", \"rsm\", \"qep\", \"qnr\", \"tet\", \"cat\",\n      \"gyr\", \"par\", \"mdf\", \"fol\", \"dfr\", \"nfs\", \"cml\", \"flo\", \"oqx\", \"sul\",\n      \"erm\", \"ereA\", \"mph\", \"mef\", \"msr\", \"ahpF\", \"rib\"\n    ];\n\n    d3.select(el)\n      .selectAll(\".node text\")\n      .style(\"font-weight\", d => boldNames.includes(d.name) ? \"bold\" : \"normal\")\n      .style(\"font-style\", d =>\n        italicSubstrings.some(sub => d.name.includes(sub)) ? \"italic\" : \"normal\"\n      );\n  }\n')\n\np3\n```\n\n## Saving the Sankey diagram\n\nIf you are trying this code or similar and want to save your plot as a png you will not be able to use `ggsave()` function because the Sankey Network is an htmlwidget. First save your plot as an html and then take a screenshot using webshot.\n\n```{r, eval = FALSE}\nhtmlwidgets::saveWidget(p3, \"output/sankey.html\", selfcontained = TRUE)\nwebshot(\"output/sankey.html\", file = \"output/sankey_arg.png\", vwidth = 900, vheight = 900)\n```\n\nOne thing I haven't been able to work out is how remove the white space on either side and align the footer to the gene name column, when I save the plot as a png. When I tried to use style = \"text-align:right\" the footnote disappeared off the page in the png. If anyone reading this has any tips please email me or DM on LinkedIn.\n\nLastly here are some references I used for generating the resistance gene list:\n\n[@mounsey2024]\n\n## Generating a Sankey diagram using ggsankey to visualise *E. coli* genes which confer resistance to the beta-lactams.\n\nIn this example I used the package ggsankey to generate a Sankey diagram. Visualising these resistance genes was not as straight forward as the other resistance genes visualised in the network above. There are multiple enzyme types, which all have a large number of variants. Certain variants have a wider range of resistance compared with their parent types, which adds in more complexity. For this reason I started with the genes on the left hand side.\n\n### Packages\n\nInstall the packages ggsankey, showtext and sysfonts, glue, patchwok and ggtext then load the libraries\n\n```{r libraries2, message = FALSE, warning = FALSE, output = FALSE}\n#remotes::install_github(\"davidsjoberg/ggsankey\")\n\nlibrary(ggsankey)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(ggtext)\n```\n\n### Read in and prepare data\n\nNext I read in the data.I generated this dataset manually. The publications used for generated this dataset are listed in the bibliography.\n\n```{r readcsv2}\ndf <- read_csv(\"data/betalactams_gsankey.csv\")\n```\n\nMy csv file contains three columns: \"gene\", \"mechanism\", \"subclass\". This data is set up differently to the first Sankey diagram in that each column will be a column in the Sankey diagram. The first column \"gene\" is the name of each resistance gene. The second column is the mechanism or type of enzyme. So instead of having \"enzymatic inactivation\" I divided the beta-lactamases into \"Penicillinases\", \"Oxcillinases\", \"IRT\" (inhibitor resistant TEM), \"ESBL\", \"AmpC\", and \"Carbapenemases\". In addition I included the mechanisms \"reduced permeability\" and \"efflux pump\". The third column is the antibiotic subclass. Given most genes confer resistance to multiple sub classes there are multiple rows for each gene.\n\n```{r}\n#Structure of my dataframe\nstr(df)\n\n#First six lines of my data frame\nhead(df)\n\n#Last six lines of my data frame\ntail(df)\n\n#The unique mechanisms / enzyme types\nunique(df$mechanism)\n\n#The unique subclasses of antibiotics\nunique(df$subclass)\n```\n\nNext, the data was converted to a long format using a function `make_long()` from the ggsankey package. This long format contains columns that define how the links flow through the diagram:\n\n-   `x`: the name of the current column (called a stage) on the x axis.\n\n-   `next_x`: the name of the next stage `x` links to (NA for the final stage which is why the subclass rows have NA values).\n\n-   `node`: the value at the starting node.\n\n-   `next_node`: the value at the connecting node.\n\nThe following code was adapted from https://r-graph-gallery.com/package/ggsankey.html\n\n```{r df_long}\ndf_long <- df %>%\n        make_long(gene, mechanism, subclass)\n\nhead(df_long)\n```\n\nHere is a first look at how the data looks when it is plotted.\n\n```{r ggsankey1}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node)) +\n        geom_sankey()\n```\n\nHere is the same plot with the links and nodes coloured by node.\n\n```{r ggsankey2}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey() +\n        scale_fill_discrete(drop = FALSE)\n```\n\nThere is a lot to tidy up. First I removed the grey background, the grid, and x and y axis labels. I find that using `theme_void()` is the easiest way to do this. I also removed the legend using `show.legend = FALSE`.\n\n```{r ggsankey3}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey(show.legend = FALSE) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n        \n```\n\nNext I addd node labels onto the Sankey diagram.\n\n```{r ggsankey4}\nggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = factor(node))) +\n        geom_sankey(show.legend = FALSE) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n        \n```\n\nI wanted to change the colours of the links so that each gene would be coloured according to its mechanism using a more visually appealing colour palette (IMO) compared with the default colours. First an extra column was added to the long dataframe to group the genes and mechanism rows by mechanism.\n\n```{r}\nmechanism_lookup <- df %>%\n        select(gene, mechanism) %>%\n        rename(node = gene) %>%\n        bind_rows(df %>% distinct(mechanism) %>% rename(node = mechanism) %>% mutate(mechanism = node)) %>%\n        distinct()\n\n# Add mechanism info to the long data\ndf_long_coloured <- df_long %>%\n        left_join(mechanism_lookup, by = \"node\")\n\nhead(df_long_coloured)\n```\n\nI selected my colours using https://r-graph-gallery.com/color-palette-finder. Shades of blue from the `seeblau` palette were used for the \"Reduced permeability\" and \"Efflux pump\" mechanisms. Shades of yellow, orange, and red from the `amber_material` palette were used for the beta-lactamase enzyme types.\n\n```{r}\n#The two palettes that I selected my colours from:\npaletteer_d(\"unikn::pal_seeblau\")\npaletteer_d(\"ggsci::amber_material\")\n```\n\nI defined my colour palette. All the antibiotic subclasses were defined as \"other\".\n\n```{r}\nmy_colour <- c(\n        \"Reduced permeability\" = \"#A6E1F4FF\",      \n        \"Efflux pump\" = \"#0F7BA2FF\",         \n        \"Penicillinases\" = \"#FFECB3FF\",\n        \"Oxcillinases\" = \"#FFD54FFF\", \n        \"IRT\" = \"#FFC107FF\", \n        \"ESBL\" = \"#FFA000FF\",\n        \"AmpC\" = \"#FF6F00FF\", \n        \"Carbapenemases\" = \"#DA291CFF\",\n        \"Other\" = \"#B3B7B8FF\" )\n```\n\nI filled the links by the new mechanism variable.\n\n```{r}\nggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = mechanism)) +\n        geom_sankey(show.legend = FALSE) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_discrete(drop = FALSE) +\n        theme_void()\n```\n\nAlthough I now have the same colour for each mechanism, my colour palette has not been used. `scale_fill_discrete()` was changed to `scale_fill_manual()`. The colours on the links were very bright so to make them slightly transparent I used the argument `flow.alpha`.\n\n```{r}\nggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,\n                    fill = mechanism)) +\n        geom_sankey(show.legend = FALSE, flow.alpha = 0.7) +\n        geom_sankey_text(aes(label = node)) +\n        scale_fill_manual(values = my_colour) +\n        theme_void()\n```\n\nNext I left justified the first column labels and right justified the second column labels. This code was adapted from https://stackoverflow.com/questions/78240951/adjust-labels-on-individual-nodes-in-sankey-diagram-using-ggsankey. Here the function `stage()` was used to control the stage at which the aesthetics should be mapped.\n\n```{r}\nggplot(df_long_coloured, aes(\n        x = x, next_x = next_x,\n        node = node, next_node = next_node,\n        fill = mechanism, label = node)) +\n        geom_sankey(flow.alpha = 0.7,\n                show.legend = FALSE) +\n        geom_sankey_text(aes(\n          x = stage(x, after_stat = x + 0.1 * case_when(\n                                                  x == 1 ~ -1,    \n                                                  x == 3 ~ 1,     \n                                                  .default = 0)),\n                    hjust = case_when(x == \"gene\" ~ 1,        \n                            x == \"subclass\" ~ 0, \n                            .default = 0.5))) +\n        theme_void() +\n        scale_fill_manual(values = my_colour)\n```\n\nNext I reordered the nodes. See https://github.com/davidsjoberg/ggsankey/issues/7 for more explanation on how to reorder nodes.\n\n```{r order}\ndf_long_coloured2 <- df_long_coloured\n\ndf_long_coloured2$node <- factor(\n  df_long_coloured$node, \n  levels = rev(c(\n    \"ompC*\", \"Reduced permeability\", \"ompF*\", \n    \"acrAB-tolC*\", \"Efflux pump\", \n    \"blaTEM-1\", \"Penicillinases\", \"blaSHV-1\", \n    \"blaOXA-1\", \"Oxcillinases\", \n    \"blaTEM-30\", \"IRT\", \n    \"blaTEM-10\", \"ESBL\", \"blaSHV-12\", \"blaCTX-M-15\", \n    \"blaGES-3\", \"blaVEB-1\", \"blaROB-1\", \"blaTLA-1\", \n    \"ampC*\", \"AmpC\", \n    \"blaCMY-2\", \"blaDHA-1\", \"blaFOX-1\", \"blaACC-4\", \n    \"blaKPC-18\", \"Carbapenemases\", \n    \"blaOXA-48\", \"blaNDM-1\", \"blaIMP-4\",\n    \"NS penicillins\", \"ES penicillins\", \"Monobactams\", \n    \"1G cephalosporins\", \"2G cephalosporins\", \n    \"3G cephalosporins\", \"4G cephalosporins\", \"Carbapenems\"))\n)\n\ndf_long_coloured2$next_node <- factor(\n  df_long_coloured$next_node, \n  levels = rev(c(\"Reduced permeability\", \"Efflux pump\", \"Penicillinases\", \n    \"Oxcillinases\", \"IRT\", \"ESBL\", \"AmpC\", \"Carbapenemases\",\n    \"NS penicillins\", \"ES penicillins\",\"Monobactams\",\"1G cephalosporins\",\n    \"Carbapenems\",\"2G cephalosporins\",\"3G cephalosporins\", \"4G cephalosporins\"))\n)\n```\n\nThe plot with the reordered nodes.\n\n```{r}\nggplot(df_long_coloured2, aes(\n        x = x, next_x = next_x,\n        node = node, next_node = next_node,\n        fill = mechanism, label = node)) +\n        geom_sankey(flow.alpha = 0.7,\n                show.legend = FALSE) +\n        geom_sankey_text(aes(\n          x = stage(x, after_stat = x + 0.1 *case_when(\n                                                  x == 1 ~ -1,    \n                                                  x == 3 ~ 1,     \n                                                  .default = 0)),\n                    hjust = case_when(x == \"gene\" ~ 1,        \n                            x == \"subclass\" ~ 0, \n                            .default = 0.5))) +\n        theme_void() +\n        scale_fill_manual(values = my_colour)\n```\n\nI italicised the gene names and changed the mechanisms to a bold style using plotmath syntax (if you know of other ways to do this please let me know). First I added another column, which will be used for plotmath syntax, called label_pms. For example to generate `x` in italic font is written as italic(x). To see more on plotmath syntax see this link https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/plotmath. The `paste()` function was used to join strings together with no separator. I joined either the string `\"italic('\"`, `\"bold('\"`, or `\"plain('\"` with the node value (so the gene name), and the string `\"')\"`. Then I changed those labels with a *bla* gene so that the enzyme type was written in subscript. The function `str_replace_all()` was used to replace any text with the literal string `italic\\\\(` followed by `bla` with the pattern of three word characters`\\\\w{3}`, a literal hyphen `-`, one word character `\\\\w` followed by one or more digits `\\\\d` or (`|`) the pattern of three word characters, hyphen, multiple digits.\n\n```{r}\n#Add a new column called label_pms with the plotmath syntax for font styling\ndf_long_coloured3 <- df_long_coloured2 %>%\n  mutate(label_pms = case_when(\n    x == \"gene\" ~ paste0(\"italic('\", node, \"')\"),          \n    x == \"mechanism\" ~ paste0(\"bold('\", node, \"')\"),       \n    x == \"subclass\" ~ paste0(\"plain('\", node, \"')\")        \n  ))\n\n#Change the bla gene labels to subscript after bla\ndf_long_coloured3 <- df_long_coloured3 %>%\n  mutate(label_pms = str_replace_all(label_pms,                                \"italic\\\\('(bla)(\\\\w{3}-\\\\w-\\\\d+|\\\\w{3}-\\\\d+)'\\\\)\", \n                               \"italic('\\\\1')[\\\\2]\"))\n```\n\nNote that when you change the order of your nodes, you also need to set the levels for your labels so that they match the same order as your nodes.\n\n```{r}\n\ndf_long_coloured3$label_pms <- factor(\n  df_long_coloured3$label_pms,\n  levels = rev(c(\n    \"italic('ompC*')\",\n    \"bold('Reduced permeability')\",\n    \"italic('ompF*')\",\n    \"italic('acrAB-tolC*')\",\n    \"bold('Efflux pump')\",\n    \"italic('bla')[TEM-1]\",\n    \"bold('Penicillinases')\",\n    \"italic('bla')[SHV-1]\",\n    \"italic('bla')[OXA-1]\",\n    \"bold('Oxcillinases')\",\n    \"italic('bla')[TEM-30]\",\n    \"bold('IRT')\",\n    \"italic('bla')[TEM-10]\",\n    \"bold('ESBL')\",\n    \"italic('bla')[SHV-12]\",\n    \"italic('bla')[CTX-M-15]\",\n    \"italic('bla')[GES-3]\",\n    \"italic('bla')[VEB-1]\",\n    \"italic('bla')[ROB-1]\",\n    \"italic('bla')[TLA-1]\",\n    \"italic('ampC*')\",\n    \"bold('AmpC')\",\n    \"italic('bla')[CMY-2]\",\n    \"italic('bla')[DHA-1]\",\n    \"italic('bla')[FOX-1]\",\n    \"italic('bla')[ACC-4]\",\n    \"italic('bla')[KPC-18]\",\n    \"bold('Carbapenemases')\",\n    \"italic('bla')[OXA-48]\",\n    \"italic('bla')[NDM-1]\",\n    \"italic('bla')[IMP-4]\",\n    # Now the antibiotic subclasses in your desired order:\n    \"plain('NS penicillins')\",\n    \"plain('ES penicillins')\",\n    \"plain('Monobactams')\",\n    \"plain('1G cephalosporins')\",\n    \"plain('2G cephalosporins')\",\n    \"plain('3G cephalosporins')\",\n    \"plain('4G cephalosporins')\",\n    \"plain('Carbapenems')\"\n  ))\n)\n```\n\nWhen calling the `ggplot()` function I then added the arguments `label = label_pms` and `parse = TRUE`, to parse it as plotmath syntax.\n\n```{r}\nps <- ggplot(df_long_coloured3, aes(\n    x = x, next_x = next_x,\n    node = node, next_node = next_node,\n    fill = mechanism, label_pms = node)) +\n  geom_sankey(flow.alpha = 0.7, show.legend = FALSE) +\n  geom_sankey_text(\n    aes(label = label_pms,\n        x = stage(x, after_stat = x + 0.1 *\n          case_when(\n            x == 1 ~ -1,\n            x == 3 ~ 1,\n            .default = 0)),\n        hjust = case_when(x == \"gene\" ~ 1,\n                          x == \"subclass\" ~ 0,\n                          .default = 0.5)),\n    parse = TRUE) +\n  theme_void() +\n  scale_fill_manual(values = my_colour)\n\nps\n```\n\nLastly I added a caption.\n\n```{r caption1}\ncaption1 <- \"Beta-lactam resistance in <i>E. coli</i> predominantly occurs through the acquisition of genes encoding beta-lactamases (shades of yellow, orange, and red, according to enzyme group), but can also occur through mutations in genes encoding outer membrane proteins (light blue) or efflux pumps (dark blue); genes with mutations are marked with an asterisk. This Sankey diagram illustrates how beta-lactam resistance genes can be grouped by mechanism (reduced permeability, efflux pump and enzymatic inactivation by different beta-lactamases) and the subclasses of beta-lactams (NS - narrow spectrum and ES - extended spectrum penicllins; monobactams; 1G - first generation, 2G - second generation, 3G - third generation, 4G - fourth generation; and carbapenems) to which they confer resistance. The beta-lactamase enzymes have been grouped into penicillinases, oxacillinases, IRT (inhibitor resistant TEM), ESBL, AmpC, and carbapenemases. One representative gene variant is shown. However, resistance profiles can vary between different variants of the same enzyme and between different enzymes from the same group.\"\n\n\npsc <- ps +\n  labs(caption = caption1) +\n  theme(plot.caption.position = \"plot\", \n        plot.caption = element_textbox_simple(\n          hjust = 0.5, \n          margin = margin(t = 40, r = 5, b = 5, l = 5)))\npsc\n#ggsave(\"output/ggsankey_final.png\", plot = psc, width = 12, height = 0.67 * 12, dpi = 300)\n```\n\nBeta-lactamase enzymes can be grouped by Ambler class (based on the amino acid sequence) or the Bush functional group (based on substrate and inhibitor activity). I'd like people to use the Sankey diagram as a reference, so I thought it would be useful to also add in a heat map to identify the Ambler class and Bush functional group of each enzyme. This will be attached to the Sankey diagram.\n\n```{r}\ncg <- read_csv(\"data/class_group.csv\")\n\ncg_long <- cg %>%\n        pivot_longer(cols = c(\"Ambler class\", \"Functional group\"),\n                     names_to = \"Category\", values_to = \"Value\")\n\ncg_long2 <- cg_long\n\ncg_long2$Enzyme <- factor(\n  cg_long2$Enzyme,\n  levels = rev(c(\"TEM-1\", \"SHV-1\", \"OXA-1\", \"TEM-30\", \"TEM-10\", \"SHV-12\", \"CTX-M-15\", \"GES-3\", \"ROB-1\", \"TLA-1\", \"AmpC\", \"CMY-2\", \"DHA-1\", \"FOX-1\", \"ACC-4\", \"KPC-18\", \"OXA-48\", \"NDM-1\", \"IMP-4\")))\n\nggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +\n        geom_tile(color = \"white\", show.legend = FALSE) +\n        geom_text(aes(label = Value), color = \"white\", size = 4) +      \n        coord_equal() +\n        scale_fill_paletteer_d(\"impressionist.colors::la_recolte_des_foins_eragny\") +\n        scale_x_discrete(position = \"top\", labels = label_wrap_gen(10)) +\n        theme_minimal() +\n        theme(axis.title = element_blank(),\n                axis.text.y = element_text(size = 8),\n\n                              panel.grid = element_blank()) \n\n\n```\n\nThe column widths were too narrow to fit the values and the axis title. So I removed `coord_equal()`, which makes the the length and the width the same for each tile. Instead I used `coord_fixed()` to set the ratio.\n\n```{r}\nph <- ggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +\n        geom_tile(color = \"white\", show.legend = FALSE) +\n        geom_text(aes(label = Value), color = \"white\", size = 4) +      \n        scale_fill_paletteer_d(\"impressionist.colors::la_recolte_des_foins_eragny\") +\n        scale_x_discrete(position = \"top\", labels = label_wrap_gen(10)) +\n        coord_fixed(ratio = 0.3) +\n        theme_minimal(base_size = 6) +\n        theme(axis.title = element_blank(),\n                axis.text.y = element_text(size = 8),\n              panel.grid = element_blank()) \n\nph\n```\n\nI also generated a caption for this plot\n\n```{r caption2}\ncaption2 <- \"Beta-lactamases can be grouped according to their Ambler class and Bush functional group. Ambler classes are based on amino acid sequence similarity (doi: 10.1042/bj2760269), and Bush functional groups are based on substrate and inhibitor profiles (doi:10.1128/AAC.01009-09).\"\n\nphc <- ph + labs(caption = caption2) +\n  theme(plot.caption.position = \"plot\", \n        plot.caption = element_textbox_simple(\n          lineheight = 0.5,\n          hjust = 0,\n          margin = margin(t = 50, r = 10, b = 5, l = 10)))\n        #plot.margin = margin(t = 5, r = 10, b = 40, l = 10))\n\n#ggsave(\"output/heatmap_final.png\", plot = phc, width = 12, height = 0.67 * 12, dpi = 300)\n```\n\nI joined the Sankey diagram and the heatmap together using the patchwork library\n\n```{r patchwork}\np_join <- phc + psc\n```\n\nNext I added the title and subtitle. For adding titles and customising ggplots I would recommend Nicola Rennie's book 'The Art of Data Visualization with ggplot2\"\n\n```{r title}\ntitle <- \"Beta-lactam resistance in <i>Escherichia coli</i>\"\n```\n\nFinally I added my social media and business icons. This code was adapted from Rennie, Nicola. 2023. “Adding Social Media Icons to Charts with {Ggplot2}.” July 27, 2023. https://nrennie.rbind.io/blog/adding-social-media-icons-ggplot2/.\n\n```{r icons}\n\nsysfonts::font_add_google(name = \"Baloo 2\", family = \"baloo\")\nsysfonts::font_add(\n  family = \"Font Awesome 7 Brands\",\n  regular = \"fonts/fontawesome-free-7.1.0/otfs/Font-Awesome-7-Brands-Regular-400.otf\"\n)\nshowtext_auto()  # Only need this ONCE, after all fonts are added\nshowtext_opts(dpi = 300)\n\nbrand_font <- \"baloo\"\nbrand_color <- \"#55692f\"\n\ngithub_icon <- \"&#xf09b\"\ngithub_username <- \"sburgess2\"\nlinkedin_icon <- \"&#xf08c\"\nlinkedin_username <- \"sara-burgess\"\n\n#img = image, src = source, span is a span tag for inline styling\nsocial_caption <- glue(\n  \"<img src='logo/GreenhoodLogoMark.png' width='20' height='14.84'/> <span style='color: {brand_color};'><strong> Sara Burgess</strong></span> |\",\n  \"<span style='font-family:\\\"Font Awesome 7 Brands\\\";'>{github_icon};</span> \",\n  \"<span style='color: #000000'>{github_username}</span> | \",\n  \"<span style='font-family:\\\"Font Awesome 7 Brands\\\";'>{linkedin_icon};</span> \",\n  \"<span style='color: #000000'>{linkedin_username}</span>\"\n)\n```\n\nThis is what my caption looks like without the plot. As described in Nicole Rennie's blog the `element_text_box_simple()` function is added so it can enable Markdown and/or HTML code. The `element_text_box()` function is very similar but it does not have any default values.\n\n```{r}\nggplot() +\n  labs(caption = social_caption, title = title) +\n  theme(plot.caption = element_textbox_simple(),\n        plot.title = element_textbox_simple())\n```\n\nNext I added my caption to the plot. I have used `plot_annotation()` to add the caption because, I'm using the library patchwork to join the two plots together.\n\n```{r}\n#| label: final_figure\n#| fig-width: 18\n#| fig-height: 10\n#| warning: false\n#Note this results in a caption twice under each plot\np_final <- p_join +\n  plot_annotation(caption = social_caption, title = title) &\n  theme(\n    plot.caption = element_textbox_simple(\n  margin = margin(t = 30, r = 10, b = 20, l = 5),\n  size = 8),\n    plot.title = element_textbox_simple(),\n    base_size = 6)\n\np_final\n\n#ggsave(\"output/hm_ggsankey_final.png\", plot = p_final, width = 12, height = 0.67 * 12, dpi = 300)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"sankey_amr.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","bibliography":["references2.bib"],"csl":"nature-communications.csl","nocite":"@*\n"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}