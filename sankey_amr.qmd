---
bibliography: references.bib
csl: nature-communications.csl
nocite: |
   @*
---

## Sankey diagram to visualise *E. coli* resistance genes

Here are the steps I used to generate my Sankey diagram.

### Packages

If you haven't done so already install the packages networkD3, tidyverse, htmlwidgets, manipulateWidget and webshot2.

Load the libraries

```{r libraries, message = FALSE, warning = FALSE, output = FALSE}
library(networkD3)
library(tidyverse)
library(htmlwidgets)
library(manipulateWidget)
library(webshot2)
library(paletteer)
library(ggsankey)
library(patchwork)
```

### Read in and prepare data

The following code was adapted from <https://r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html> (and a little bit of help from ChatGPT when I had trouble setting up the groups). Two data frames are needed to generate a Sankey diagram. One for the links and the other for the nodes. In the R Graph Gallery example, the links data frame was generated using the data.frame() function. Initially I tried this, but then it became too messy when I was adding multiple antibiotic classes so I read in a csv file.

```{r readcsv}
links <- read_csv("data/resistance_mechanisms.csv")
```

My csv file contains three columns: source, target, value. Source is the origin of each data link. Given, my Sankey diagram has three columns, source is both the name of the of the antibiotic classes and the mechanisms. Target is the endpoint of each data link. This contains the mechanisms and resistance genes. Value is the thickness of each link.

```{r}
#First six lines of my data frame
head(links)

#Last six lines of my data frame
tail(links)
```

The \` in some of my gene names is read in as ? so first I replaced the ? with ′

```{r}
links$target <- str_replace_all(links$target, "\\?", "′") 
```

Next I created a one column data frame for all the nodes. The column name is labelled name and the observations are all the unique names from source and target.

```{r}
nodes <- data.frame(
  name = unique(c(as.character(links$source), as.character(links$target))))
```

A second column was added to the nodes data frame called group. This will be used to colour the Sankey diagram links by group.

```{r}
# Grouping
nodes$group <- case_when(
  nodes$name == "Aminoglycosides" ~ "Aminoglycosides",
  nodes$name == "Fluoroquinolones" ~ "Fluoroquinolones",
  nodes$name == "Tetracyclines" ~ "Tetracyclines",
  nodes$name == "Phenicols" ~ "Phenicols",
  nodes$name == "Sulfonamides & Trimethoprim" ~ "Sulfonamides",
  nodes$name == "Nitrofurans" ~ "Nitrofurans",
  nodes$name == "Macrolides" ~ "Macrolides",
  nodes$name %in% c("aac(3′)", "aadA", "aadB", "aadD",
                    "aph(3′)", "aphA15", "rrsH*", "rsmG*") ~ "Aminoglycosides",
  nodes$name %in% c("gyrA*", "gyrB*", "parC*", "parE*", "qep", "qnr", "oqxAB") ~ "Fluoroquinolones",
  nodes$name %in% c("tetX", "tetM", "tetW", "tetA", "tetB", "tetC", "tetD") ~ "Tetracyclines",
  nodes$name %in% c("catB", "catII", "cmlA", "floR") ~ "Phenicols",
  nodes$name %in% c("dfr", "folP*", "sul1", "sul2", "sul3", "sul4") ~ "Sulfonamides",
  nodes$name %in% c("nfsA*", "nfsB*", "ahpF*", "ribB*", "ribE*") ~ "Nitrofurans",
  nodes$name %in% c("ermA", "ermB", "ermC", "ereA", "mphA", "mphB", "mefA", "mefB", "msrA", "msrD") ~ "Macrolides",
  TRUE ~ "Other"
)
```

Two additional columns were added, which contain an index for both the source and the target. The match function is used to match the position of the values that are being matched. As I understand it networkD3 uses an index system starting from 0, whereas base R starts from 1, hence the -1 is needed to generate an index system suitable for the function networkD3::sankeyNetwork().

```{r}
# ID mapping
links$IDsource <- match(links$source, nodes$name) - 1
links$IDtarget <- match(links$target, nodes$name) - 1

links
```

Similar to the nodes data frame a group column was also added to the links data frame.

```{r}
#Generate vector containing the group names for all the antibiotic classes
class <- c("Aminoglycosides", "Fluoroquinolones", "Tetracyclines", "Phenicols", "Sulfonamides & Trimethoprim", "Nitrofurans", "Macrolides")
#Generate vector containing the group names for all the mechanisms
mechanisms <- c("Enzymatic inactivation", "Target alteration", "Target protection", "Efflux pump", "Target replacement", "Reduced prodrug activation")

# Assign groups
links$group <- case_when(
  links$source %in% class ~ nodes$group[match(links$source, nodes$name)],
  links$source %in% mechanisms ~ nodes$group[match(links$target, nodes$name)],
  TRUE ~ "Other")
```

Lastly I generated my colour scale. Here (as I understand it) because networkD3 uses Javascript code the colour scale also has to be written in Javascript. '.domain' defines each group that I want to apply each colour to.

```{r colour}
my_color <- 'd3.scaleOrdinal()
  .domain(["Aminoglycosides", "Fluoroquinolones", "Tetracyclines", 
           "Phenicols", "Sulfonamides", "Nitrofurans", "Macrolides", "Other"])
  .range(["#90CAF9", "#A5D6A7", "#D1C4E9", "#ffffb3", "#fb8072", "#fdb462", "#F8BBD0FF", "#E0E0E0"]);'
```

### Sankey diagram

Now for the fun part generating the Sankey diagram.

```{r sankey1, message = FALSE}
# Sankey plot
q <- sankeyNetwork(
  Links = links, Nodes = nodes,
  Source = "IDsource", Target = "IDtarget",
  Value = "value", NodeID = "name",
  NodeGroup = "group", LinkGroup = "group",
  colourScale = my_color,
  width = 900, height = 900,
  nodeWidth = 60
)
q
```

There are a few things I don't like. The font size and type, as well as having the resistance genes on top of the links.

Here I've adjusted these three things within the sankeyNetwork() function using the arguments fontSize, fontFamily, and sinksRight.

```{r sankey2, message = FALSE}
# Sankey plot
p <- sankeyNetwork(
  Links = links, Nodes = nodes,
  Source = "IDsource", Target = "IDtarget",
  Value = "value", NodeID = "name",
  NodeGroup = "group", LinkGroup = "group",
  colourScale = my_color,
  fontSize = 12, fontFamily = "Verdana", nodeWidth = 60, sinksRight = FALSE, width = 900, height = 900
)
p
```

It's still not quite what I'd like. To my knowledge that is pretty much all that can be adjusted within the SankeyNetwork() function. However, because the Sankey Network is an htmlwidget (you can check this using the class function) you can use the htmlwidge package to append labels.

```{r class}
class(p)
```

### Using htmlwidgets to adjust the Sankey diagram

The code below was adapted from the tutorial <https://www.geeksforgeeks.org/r-language/how-to-add-axis-labels-using-networkd3-in-r/> and the response on this stack overflow post <https://stackoverflow.com/questions/50132459/how-to-add-title-to-a-networkd3-visualisation-when-saving-as-a-web-page>

Here I've added a title to my diagram.

```{r prepend}
#prepend title
p1 <- htmlwidgets::prependContent(p, htmltools::tags$h1(htmltools::HTML("Resistance genes in <em>Escherichia coli</em>"),
  style = "text-align:center; color:#1b2422; font-size:18px; font-family:Verdana;"))
p1
```

Here I've added a footnote to my diagram.

```{r append}
#append footnote
p2 <- htmlwidgets::appendContent(p1, htmltools::tags$p("* Genes with point mutations", style = "text-align:center; color:#666; font-size:12px; font-family:Verdana;"))
p2
```

I also wanted to change the font style to bold for the antibiotic classes and italics for the resistance genes. I got a bit of help from ChatGPT for this piece of code.

```{r}
#The following function was generated using chapgpt
p3 <- htmlwidgets::onRender(p2, '
  function(el, x) {
    const boldNames = [
      "Aminoglycosides", "Fluoroquinolones", "Tetracyclines",
      "Phenicols", "Sulfonamides & Trimethoprim", "Nitrofurans",
      "Enzymatic inactivation", "Target alteration",
      "Target protection", "Efflux pump", "Target replacement",
      "Reduced prodrug activation", "Macrolides"
    ];

    const italicSubstrings = [
      "aac", "aad", "aph", "rr", "rsm", "qep", "qnr", "tet", "cat",
      "gyr", "par", "mdf", "fol", "dfr", "nfs", "cml", "flo", "oqx", "sul",
      "erm", "ereA", "mph", "mef", "msr", "ahpF", "rib"
    ];

    d3.select(el)
      .selectAll(".node text")
      .style("font-weight", d => boldNames.includes(d.name) ? "bold" : "normal")
      .style("font-style", d =>
        italicSubstrings.some(sub => d.name.includes(sub)) ? "italic" : "normal"
      );
  }
')

p3
```

## Saving the Sankey diagram

If you are trying this code or similar and want to save your plot as a png you will not be able to use ggsave() function because the Sankey Network is an htmlwidget. First save your plot as an html and then take a screenshot using webshot.

```{r, eval = FALSE}
htmlwidgets::saveWidget(p3, "output/sankey.html", selfcontained = TRUE)
webshot("output/sankey.html", file = "output/sankey_arg.png", vwidth = 900, vheight = 900)
```

One thing I haven't been able to work out is how remove the white space on either side and align the footer to the gene name column, when I save the plot as a png. When I tried to use style = "text-align:right" the footnote disappeared off the page in the png. If anyone reading this has any tips please email me or DM on LinkedIn.

Lastly here are some references I used for generating the resistance gene list:

[@mounsey2024]

## Sankey diagram to visualise *E. coli* genes which confer resistance  to the beta-lactams.

In this example I used the package ggsankey to generate a Sankey diagram. Visualising these resistance genes was not as straight forward as the other resistance genes visualised in the network above. There are multiple enzyme types, which all have a large number of variants. Certain variants have a wider range of resistance compared with their parent types, which adds in more complexity. For this reason I started with the genes on the left hand side. I grouped them into narrow spectrum ...

### Packages

If you haven't done so already install the packages ggsankey, showtext and sysfonts, then load the libraries

```{r libraries2, message = FALSE, warning = FALSE, output = FALSE}
#remotes::install_github("davidsjoberg/ggsankey")
#install.packages("showtext")
#install.packages("sysfonts")

library(ggsankey)
library(tidyverse)
library(showtext)
library(sysfonts)
```

### Read in and prepare data

Read in the data.

```{r readcsv2}
df <- read_csv("data/betalactams_gsankey.csv")
```

My csv file contains three columns: "gene", "mechanism", "subclass". This data is set up differently to the first Sankey diagram in that each column will be a column in the Sankey diagram. "gene" is the name of each resistance gene. The second column is the mechanism. Instead of having "enzymatic inactivation" I divided the beta-lactamases into "Penicillinases",   "Oxcillinases", "IRT" (inhibitor resistant TEM), "ESBL", "AmpC", and "Carbapenemases". In addition I included "reduced permeability" and "efflux pump". The third column was the antibiotic subclass. Given most genes confer resistance to multiple sub classes there are multiple rows for each gene. 

```{r}
#Structure of my dataset
str(df)

#First six lines of my data frame
head(df)

#Last six lines of my data frame
tail(df)

#The unique mechanisms
unique(df$mechanism)

unique(df$subclass)
```

Next the data was converted to a long format using a function make_long() from the ggsankey package. x (for the x axis) is the name/label for each column of data, node is the starting node, next_x ...

The following code was adapted from https://r-graph-gallery.com/package/ggsankey.html

```{r df_long}
df_long <- df %>%
        make_long(gene, mechanism, subclass)

head(df_long)
```

Here is a first look at how the data looks when it is plotted.

```{r ggsankey1}
ggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node)) +
        geom_sankey()
```

Here is the same plot with the links and nodes coloured by node.

```{r ggsankey1}
ggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,
                    fill = factor(node))) +
        geom_sankey() +
        scale_fill_discrete(drop = FALSE)
```
There's a lot to tidy up. First I would like to get rid of the grey background, the grid, and x and  y axis. Using theme_void() is the easiest way to do this. I would also like to remove the legend using show.legend = FALSE and add the labels onto the network. 

```{r ggsankey1}
ggplot(df_long, aes(x = x, next_x = next_x, node = node, next_node = next_node,
                    fill = factor(node))) +
        geom_sankey(show.legend = FALSE) +
        geom_sankey_text(aes(label = node)) +
        scale_fill_discrete(drop = FALSE) +
        theme_void()
        
```

Next I changed the colours. First I wanted each gene to be coloured according to its mechanism and to use a more appealing colour palette than the default colours. An extra column was added to the long dataframe to group the genes and mechanism rows by mechanism.

```{r}
#Chatgpt used for this code
mechanism_lookup <- df %>%
        # Get gene-mechanism pairs
        select(gene, mechanism) %>%
        rename(node = gene) %>%
        # Add mechanism-mechanism pairs (mechanisms map to themselves)
        bind_rows(df %>% distinct(mechanism) %>% rename(node = mechanism) %>% mutate(mechanism = node)) %>%
        distinct()

# Add mechanism info to your long data
df_long_coloured <- df_long %>%
        left_join(mechanism_lookup, by = "node")
```

I selected my colours using https://r-graph-gallery.com/color-palette-finder
Two shades of blue from the seeblau palette were used for the  and shades of yellow, orange, and red from the amber_material palette were used for the beta-lactamase mechanisms.

```{r}
paletteer_d("unikn::pal_seeblau")
paletteer_d("ggsci::amber_material")
```

I defined my colour palette. All the antibiotic subclasses were define as 'other'.

```{r}
my_colour <- c(
        "Reduced permeability" = "#A6E1F4FF",      
        "Efflux pump" = "#0F7BA2FF",         
        "Penicillinases" = "#FFECB3FF",
        "Oxcillinases" = "#FFD54FFF", 
        "IRT" = "#FFC107FF", 
        "ESBL" = "#FFA000FF",
        "AmpC" = "#FF6F00FF", 
        "Carbapenemases" = "#DA291CFF",
        "Other" = "#B3B7B8FF" )
```

```{r}
ggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,
                    fill = mechanism)) +
        geom_sankey(show.legend = FALSE) +
        geom_sankey_text(aes(label = node)) +
        scale_fill_discrete(drop = FALSE) +
        theme_void()
```

However, as you can see although I now have the same colour for each mechanism, my colour palette has not been used. scale_fill_discrete() was changed to scale_fill_manual(). The colours on the links were very bright so to make them slightly transparent I used the argument "flow.alpha"

```{r}
ggplot(df_long_coloured, aes(x = x, next_x = next_x, node = node, next_node = next_node,
                    fill = mechanism)) +
        geom_sankey(show.legend = FALSE, flow.alpha = 0.7) +
        geom_sankey_text(aes(label = node)) +
        scale_fill_manual(values = my_colour) +
        theme_void()
```

Next I left justified the first column labels and right justified the second column labels. This code was adapted from https://stackoverflow.com/questions/78240951/adjust-labels-on-individual-nodes-in-sankey-diagram-using-ggsankey.Here the function stage() is used to control the stage at which the aesthetics should be mapped/evaluated. 

```{r}
ggplot(df_long_coloured, aes(
        x = x, next_x = next_x,
        node = node, next_node = next_node,
        fill = mechanism, label = node)) +
        geom_sankey(flow.alpha = 0.7,
                show.legend = FALSE) +
        geom_sankey_text(
                aes(x = stage(x, after_stat = x + 0.1 *
                                          case_when(
                                                  x == 1 ~ -1,    
                                                  x == 3 ~ 1,     
                                                  .default = 0
                                          )),
                    hjust = case_when(x == "gene" ~ 1,        
                            x == "subclass" ~ 0, 
                            .default = 0.5))) +
        theme_void() +
        scale_fill_manual(values = my_colour)
        
```

Next I italicised the gene names and changed the mechanisms to a bold style. If anyone knows of any other ways to do this please let me know. To do this I first added another column with the plotmath syntax called label_pms. The paste0 function is used to join strings together with no separator. Here I joined the string "italic('" followed by the gene name, followed by the string "')".

In the ggplot I then added the arguments label = label_pms and parse = TRUE, to parse it as plotmath syntax. For example to draw x in italic font is written as `italic(x)` To see more on plotmath syntax see this link https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/plotmath. 

```{r}
df_long_coloured2 <- df_long_coloured %>%
  mutate(label_pms = case_when(
    x == "gene" ~ paste0("italic('", node, "')"),          
    x == "mechanism" ~ paste0("bold('", node, "')"),       
    x == "subclass" ~ paste0("plain('", node, "')")        
  ))

#Change the bla gene labels to subscript after bla

df_long_coloured3 <- df_long_coloured2 %>%
  mutate(
    label_pms = str_replace_all(label_pms,                                "italic\\('(bla)(\\w{3}-\\w-\\d+|\\w{3}-\\d+)'\\)", 
                               "italic('\\1')[\\2]"))


ggplot(df_long_coloured3, aes(
    x = x, next_x = next_x,
    node = node, next_node = next_node,
    fill = mechanism, label_pms = node)) +
  geom_sankey(flow.alpha = 0.7, show.legend = FALSE) +
  geom_sankey_text(
    aes(label = label_pms,
        x = stage(x, after_stat = x + 0.1 *
          case_when(
            x == 1 ~ -1,
            x == 3 ~ 1,
            .default = 0)),
        hjust = case_when(x == "gene" ~ 1,
                          x == "subclass" ~ 0,
                          .default = 0.5)),
    parse = TRUE) +
  theme_void() +
  scale_fill_manual(values = my_colour)


```

See https://github.com/davidsjoberg/ggsankey/issues/7 for more explanation on how to reorder nodes. 

```{r order}
df_long_coloured2 <- df_long_coloured

df_long_coloured2$node <- factor(df_long_coloured3$node, levels = rev(c("ompC*", "Reduced permeability", "NS penicillins", "ES penicillins", "1G cephalosporins", "3G cephalosporins", "Carbapenems", "ompF*", "acrAB-tolC*", "Efflux pump", "4G cephalosporins", "blaTEM-1", "Penicillinases", "blaSHV-1", "blaOXA-1", "Oxcillinases", "blaTEM-30", "IRT", "Monobactams", "blaTEM-10", "ESBL", "blaSHV-12", "blaCTX-M-15", "blaGES-3", "blaVEB-1", "blaROB-1", "blaTLA-1", "ampC*", "AmpC", "2G cephalosporins", "blaCMY-2", "blaDHA-1", "blaFOX-1",  "blaACC-4", "blaKPC-18", "Carbapenemases", "blaOXA-48", "blaNDM-1", "blaIMP-4")))

df_long_coloured2$next_node <- factor(df_long_coloured3$next_node, 
                                     levels = rev(c("Reduced permeability", "Efflux pump", "NS penicillins", "ES penicillins", "1G cephalosporins", "2G cephalosporins", "3G cephalosporins", "4G cephalosporins", "Monobactams", "Carbapenems",   "Penicillinases", "Oxcillinases", "IRT", "ESBL", "AmpC", "Carbapenemases")))

df_long_coloured3$label_pms <- factor(df_long_coloured3$label_pms, 
                                      levels = rev(c("ompC*", "Reduced permeability", "NS penicillins", "ES penicillins", "1G cephalosporins", "3G cephalosporins", "Carbapenems", "ompF*", "acrAB-tolC*", "Efflux pump", "4G cephalosporins", "blaTEM-1", "Penicillinases", "blaSHV-1", "blaOXA-1", "Oxcillinases", "blaTEM-30", "IRT", "Monobactams", "blaTEM-10", "ESBL", "blaSHV-12", "blaCTX-M-15", "blaGES-3", "blaVEB-1", "blaROB-1", "blaTLA-1", "ampC*", "AmpC", "2G cephalosporins", "blaCMY-2", "blaDHA-1", "blaFOX-1",  "blaACC-4", "blaKPC-18", "Carbapenemases", "blaOXA-48", "blaNDM-1", "blaIMP-4")))

ggplot(df_long_coloured2, aes(
        x = x, next_x = next_x,
        node = node, next_node = next_node,
        fill = mechanism, label = node)) +
        geom_sankey(flow.alpha = 0.7,
                show.legend = FALSE) +
        geom_sankey_text(
                aes(x = stage(x, after_stat = x + 0.1 *
                                          case_when(
                                                  x == 1 ~ -1,    
                                                  x == 3 ~ 1,     
                                                  .default = 0
                                          )),
                    hjust = case_when(x == "gene" ~ 1,        
                            x == "subclass" ~ 0, 
                            .default = 0.5))) +
        theme_void() +
        scale_fill_manual(values = my_colour)


df_long_coloured3 <- df_long_coloured2 %>%
  mutate(label_pms = case_when(
    x == "gene" ~ paste0("italic('", node, "')"),          
    x == "mechanism" ~ paste0("bold('", node, "')"),       
    x == "subclass" ~ paste0("plain('", node, "')")        
  ))

#Change the bla gene labels to subscript after bla

df_long_coloured3 <- df_long_coloured3 %>%
  mutate(
    label_pms = str_replace_all(label_pms,                                "italic\\('(bla)(\\w{3}-\\w-\\d+|\\w{3}-\\d+)'\\)", 
                               "italic('\\1')[\\2]"))
df_long_coloured3$label_pms <- factor(
  df_long_coloured3$label_pms,
  levels = rev(c(
    "italic('ompC*')",
    "bold('Reduced permeability')",
    "plain('NS penicillins')",
    "plain('ES penicillins')",
    "plain('1G cephalosporins')",
    "plain('3G cephalosporins')",
    "plain('Carbapenems')",
    "italic('ompF*')",
    "italic('acrAB-tolC*')",
    "bold('Efflux pump')",
    "plain('4G cephalosporins')",
    "italic('bla')[TEM-1]",
    "bold('Penicillinases')",
    "italic('bla')[SHV-1]",
    "italic('bla')[OXA-1]",
    "bold('Oxcillinases')",
    "italic('bla')[TEM-30]",
    "bold('IRT')",
    "plain('Monobactams')",
    "italic('bla')[TEM-10]",
    "bold('ESBL')",
    "italic('bla')[SHV-12]",
    "italic('bla')[CTX-M-15]",
    "italic('bla')[GES-3]",
    "italic('bla')[VEB-1]",
    "italic('bla')[ROB-1]",
    "italic('bla')[TLA-1]",
    "italic('ampC*')",
    "bold('AmpC')",
    "plain('2G cephalosporins')",
    "italic('bla')[CMY-2]",
    "italic('bla')[DHA-1]",
    "italic('bla')[FOX-1]",
    "italic('bla')[ACC-4]",
    "italic('bla')[KPC-18]",
    "bold('Carbapenemases')",
    "italic('bla')[OXA-48]",
    "italic('bla')[NDM-1]",
    "italic('bla')[IMP-4]"
  ))
)

ps <- ggplot(df_long_coloured3, aes(
    x = x, next_x = next_x,
    node = node, next_node = next_node,
    fill = mechanism, label_pms = node)) +
  geom_sankey(flow.alpha = 0.7, show.legend = FALSE) +
  geom_sankey_text(
    aes(label = label_pms,
        x = stage(x, after_stat = x + 0.1 *
          case_when(
            x == 1 ~ -1,
            x == 3 ~ 1,
            .default = 0)),
        hjust = case_when(x == "gene" ~ 1,
                          x == "subclass" ~ 0,
                          .default = 0.5)),
    parse = TRUE) +
  theme_void() +
  scale_fill_manual(values = my_colour)

```

Next I have made a heat map to identify the amber class and functional group of each enzyme. This will (hopefully) be attached to the Sankey diagram. 

```{r}
cg <- read_csv("data/class_group.csv")

cg_long <- cg %>%
        pivot_longer(cols = c("Amber class", "Functional group"),
                     names_to = "Category", values_to = "Value")

cg_long2 <- cg_long

cg_long2$Enzyme <- factor(
  cg_long2$Enzyme,
  levels = rev(c("TEM-1", "SHV-1", "OXA-1", "TEM-30", "TEM-10", "SHV-12", "CTX-M-15", "GES-3", "ROB-1", "TLA-1", "AmpC", "CMY-2", "DHA-1", "FOX-1", "ACC-4", "KPC-18", "OXA-48", "NDM-1", "IMP-4")))

ph <- ggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +
        geom_tile(color = "white", show.legend = FALSE) +
        geom_text(aes(label = Value), color = "white", size = 4) +      
        coord_equal() +
        scale_fill_paletteer_d("impressionist.colors::la_recolte_des_foins_eragny") +
        scale_x_discrete(position = "top", labels = label_wrap_gen(10)) +
        theme_minimal() +
        theme(axis.title = element_blank(),
                axis.text.y = element_text(size = 8),

                              panel.grid = element_blank()) 

ph
```

The column widths were too narrow to fit the values and the axis title. So I removed coord_equal(), which makes the the length and the width the same for each tile. 

```{r}
ph <- ggplot(data = cg_long2, aes(x = Category, y = Enzyme, fill = Value)) +
        geom_tile(color = "white", show.legend = FALSE) +
        geom_text(aes(label = Value), color = "white", size = 4) +      
        scale_fill_paletteer_d("impressionist.colors::la_recolte_des_foins_eragny") +
        scale_x_discrete(position = "top", labels = label_wrap_gen(10)) +
        coord_fixed(ratio = 0.3) +
        theme_minimal() +
        theme(axis.title = element_blank(),
                axis.text.y = element_text(size = 8),
              panel.grid = element_blank()) 

ph
```

Finally I joined the two plots together using the patchwork library

```{r patchwork}
ph + ps
```